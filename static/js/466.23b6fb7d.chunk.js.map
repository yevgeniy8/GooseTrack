{"version":3,"file":"static/js/466.23b6fb7d.chunk.js","mappings":"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","sources":["components/Calendar/CalendarToolbar/CalendarToolbar.styled.jsx","components/Calendar/ChoosedMonth/utils.js","components/Calendar/CalendarToolbar/PeriodPaginator.jsx","components/Calendar/CalendarToolbar/PeriodTypeSelect.jsx","components/Calendar/CalendarToolbar/CalendarToolbar.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.styled.jsx","components/Calendar/ChoosedMonth/MonthCalendarHead.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.jsx","components/Calendar/ChoosedDay/TasksColumn/ColumnsTasksList.styled.jsx","components/Calendar/ChoosedDay/TasksColumn/AddTaskBtn.jsx","components/Calendar/ChoosedDay/TasksColumn/ColumnsTasksList.jsx","components/Calendar/ChoosedDay/ChoosedDay.jsx","pages/CalendarPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const BtnPeriod = styled.button`\n    color: white;\n    font-size: 16px;\n    font-family: Inter;\n    font-weight: 700;\n    text-transform: uppercase;\n    line-height: 18px;\n    word-wrap: break-word;\n    font-family: Inter;\n    width: 131px;\n    height: 34px;\n    padding: 8px, 12px;\n    border-radius: 8px;\n    border: none;\n    background-color: #3e85f3;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus {\n        background-color: #2b78ef;\n    }\n`;\n\nexport const CalendarToolbarContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 32px;\n`;\n\nexport const Paginator = styled.div`\n    display: flex;\n    gap: 8px;\n    align-items: center;\n`;\n\nexport const BtnLeft = styled.button`\n    padding: 8px 10px;\n    width: 38px;\n    height: 34px;\n    background-color: #fff;\n    border: solid 1px rgba(220, 227, 229, 0.8);\n    border-radius: 8px 0 0 8px;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const BtnRight = styled.button`\n    padding: 8px 10px;\n    width: 38px;\n    height: 34px;\n    background-color: #fff;\n    border: solid 1px rgba(220, 227, 229, 0.8);\n    border-radius: 0 8px 8px 0;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const Svg = styled.svg`\n    stroke: #343434;\n`;\n\nexport const BtnMonth = styled.button`\n    width: 82px;\n    height: 34px;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 8px 0 0 8px;\n    border-right: 1px solid rgba(62, 133, 243, 0.2);\n    background-color: #e3f3ff;\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 500;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: center;\n    color: #3e85f3;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus,\n    &:active {\n        background-color: rgba(62, 133, 243, 0.2);\n    }\n`;\n\nexport const BtnDay = styled.button`\n    width: 82px;\n    height: 34px;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 0 8px 8px 0;\n    border-left: 1px solid rgba(62, 133, 243, 0.2);\n    background-color: #e3f3ff;\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 500;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: center;\n    color: #3e85f3;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus,\n    &:active {\n        background-color: rgba(62, 133, 243, 0.2);\n    }\n`;\n","export const DAYS = ['Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat', 'Sun'];\n\nexport const getDaysInMonth = date => {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n};\n\nexport const range = (end) => {\n  const { result } = Array.from({ length: end }).reduce(\n    ({ result, current }) => ({\n      result: [...result, current],\n      current: current + 1\n    }),\n    { result: [], current: 1 }\n  );\n    return result;\n};\n\nexport const sortDays = date => {\n    const dayIndex = new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n    const sortedDays = [...DAYS.slice(dayIndex), ...DAYS.slice(0, dayIndex)];\n    return sortedDays;\n};\n\nexport const datesAreOnSameDay = (first, second) =>\n    first.getFullYear() === second.getFullYear() &&\n    first.getMonth() === second.getMonth() &&\n    first.getDate() === second.getDate();\n\nexport const getMonthYear = date => {\n    const d = date.toDateString().split(' ');\n    return `${d[1]} ${d[3]}`;\n};\n\nexport const nextMonth = (date, cb) => {\n    const mon = date.getMonth();\n    if (mon < 11) {\n        date.setMonth(mon + 1);\n    } else {\n        date.setMonth(0);\n        date.setFullYear(date.getFullYear() + 1);\n    }\n    cb(new Date(date));\n};\n\nexport const prevMonth = (date, cb) => {\n    const mon = date.getMonth();\n    if (mon > 0) {\n        date.setMonth(mon - 1);\n    } else {\n        date.setMonth(11);\n        date.setFullYear(date.getFullYear() - 1);\n    }\n    cb(new Date(date));\n};\n\nexport const getSortedDays = date => {\n    const daysInMonth = range(getDaysInMonth(date));\n    const index = new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n    return [...Array(index === 0 ? 6 : index - 1), ...daysInMonth];\n};","import { BtnLeft, BtnRight, BtnPeriod, Svg, Paginator } from \"./CalendarToolbar.styled\";\n\nimport sprite from '../../../images/icons.svg';\nimport { getMonthYear, nextMonth, prevMonth } from \"../ChoosedMonth/utils\";\nimport { useState } from \"react\";\n\nconst PeriodPaginator = () => {\nconst [currentDate, setCurrentDate] = useState(new Date(2023, 9, 1));\n\n    return ( \n        <Paginator>\n            <BtnPeriod type=\"button\">{getMonthYear(currentDate)}</BtnPeriod>\n            <div>\n                <BtnLeft type=\"button\" onClick={() => prevMonth(currentDate, setCurrentDate)}>\n                    \n                <Svg width=\"18\" height=\"18\">\n                    <use href={`${sprite}#chevron-left`} />\n                </Svg>\n            </BtnLeft>\n            <BtnRight type=\"button\" onClick={() => nextMonth(currentDate, setCurrentDate)}>\n                <Svg width=\"18\" height=\"18\">\n                    <use href={`${sprite}#chevron-right`} />\n                </Svg>\n            </BtnRight>\n            </div>\n        </Paginator>\n     );\n}\n \nexport default PeriodPaginator;\n\n// <DateControls>\n//         <button\n//           onClick={() => prevMonth(currentDate, setCurrentDate)}\n//           name=\"arrow-back-circle-outline\"\n//         ></button>\n//         <button\n//           onClick={() => nextMonth(currentDate, setCurrentDate)}\n//           name=\"arrow-forward-circle-outline\"\n//         ></button>\n//       </DateControls>","import { NavLink } from 'react-router-dom';\nimport { BtnDay, BtnMonth } from \"./CalendarToolbar.styled\";\n\nconst PeriodTypeSelect = () => {\n    return ( \n        <div>\n            <NavLink to=\"/user/calendar/month/:currentDate\">\n                <BtnMonth type=\"button\">Month</BtnMonth>\n            </NavLink>\n            <NavLink to=\"/user/calendar/day/:currentDay\">\n                <BtnDay type=\"button\">Day</BtnDay>\n            </NavLink>\n            \n        </div>\n     );\n}\n \nexport default PeriodTypeSelect;","import { CalendarToolbarContainer } from \"./CalendarToolbar.styled\";\nimport PeriodPaginator from \"./PeriodPaginator\";\nimport PeriodTypeSelect from \"./PeriodTypeSelect\";\n\nconst CalendarToolbar = () => {\n    return ( \n        <CalendarToolbarContainer>\n            <PeriodPaginator />\n            <PeriodTypeSelect />\n        </CalendarToolbarContainer>\n     );\n}\n \nexport default CalendarToolbar;","import styled from '@emotion/styled';\n\n// export const WeekdaysBox = styled.div`\n// background-color: rgba(255, 255, 255, 1);\n// border: solid 1px rgba(220, 227, 229, 0.8);\n// border-radius: 8px;\n// `\n\nexport const WeekdaysList = styled.ul`\n    display: flex;\n    justify-content: space-around;\n    padding: 14px 0;\n    background-color: rgba(255, 255, 255, 1);\n    border: 1px solid rgba(220, 227, 229, 0.8);\n    border-radius: 8px;\n    overflow: hidden;\n    `;\n\nexport const WeekdaysItem = styled.li`\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 600;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: left;\n    text-transform: uppercase;\n    &:nth-last-child(-n+2) {\n        color: #3E85F3;\n    };\n`\n\n\n\n// .item {\n//     width: calc((100% - 10 * 5px) / 5);\n//     margin: 5px;\n//     display: flex;\n//     flex-direction: column;\n//     justify-content: space-between;\n//     gap: 8px;\n//     padding: 5px;\n//     text-align: center;\n// }\n\n// .list {\n//     display: flex;\n//     flex-direction: row;\n//     flex-wrap: wrap;\n//     justify-content: center;\n//     gap: 15px;\n//     margin: -5px;\n//     transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n// }\n\n\n","import { WeekdaysItem, WeekdaysList } from \"./ChoosedMonth.styled\";\n\nimport { DAYS } from './utils';\n\nconst CalendarHead\n = () => {\n     return ( \n         \n         <WeekdaysList>\n             {DAYS.map((day) => (\n          <WeekdaysItem >{day}</WeekdaysItem>\n        ))}\n             </WeekdaysList>\n        \n     );\n}\n \nexport default CalendarHead;","import CalendarHead from \"./MonthCalendarHead\";\n\nconst ChoosedMonth = () => {\n  return ( \n    <div style={{backgroundColor: 'rgba(202, 232, 255, 1)'}}>\n      <CalendarHead/>\n    </div>\n   );\n}\n \nexport default ChoosedMonth;\n\n\n","import styled from '@emotion/styled';\n\nexport const Ulka = styled.ul`\n  list-style: none;\n  gap: 18px;\n  display: flex;\n  flex-direction: column;\n  padding: 0px;\n`;\nexport const Container = styled.div`\n  margin-top: 18px;\n  display: flex;\n  gap: 27px;\n  ${\n    '' /* width: 1200px;\n  margin-left: auto; */\n  }\n`;\nexport const Colonka = styled.div`\n  flex-basis: calc((100% - 2 * 27px) / 3);\n  background: snow;\n  padding: 20px;\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  background: #fff;\n  min-width: 135px;\n`;\nexport const AddTaskBtn = styled.button`\n  border-radius: 8px;\n  border: 1px dashed #3e85f3;\n  background: #e3f3ff;\n\n  display: flex;\n  height: 52px;\n  width: 100%;\n\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n\n  left: 20px;\n  bottom: 20px;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n  &:hover {\n    background: #cbe6ff;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 4px #3e85f3;\n  }\n`;\nexport const TaskLi = styled.li`\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  background: #f7f6f9;\n`;\nexport const ColumnTitle = styled.h2`\n  color: #111;\n  font-family: Inter;\n  font-size: 20px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 24px; /* 120% */\n`;\n","// import React from 'react';\nimport { AddTaskBtn } from './ColumnsTasksList.styled';\n\nconst AddTaskButton = () => {\n  return (\n    <AddTaskBtn>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        className=\"feather feather-plus\"\n      >\n        <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n        <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\n      </svg>\n      Add task\n    </AddTaskBtn>\n  );\n};\n\nexport default AddTaskButton;\n","import { Ulka, Container, Colonka, ColumnTitle } from './ColumnsTasksList.styled';\n// import TaskColumnCard from '../TaskColumnCard/TaskColumnCard';\nimport AddTaskButton from './AddTaskBtn';\n\nconst TasksColumnsList = () => {\n  return (\n    <Container>\n      <Colonka>\n        <ColumnTitle>\n          To do{' '}\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"feather feather-plus\"\n          >\n            <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n            <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\n          </svg>\n        </ColumnTitle>\n        <Ulka></Ulka>\n        <AddTaskButton />\n      </Colonka>\n      <Colonka>\n        <ColumnTitle>In progress</ColumnTitle>\n        <Ulka></Ulka>\n        <AddTaskButton />\n      </Colonka>\n      <Colonka>\n        <ColumnTitle>Done</ColumnTitle>\n        <Ulka></Ulka>\n        <AddTaskButton />\n      </Colonka>\n    </Container>\n  );\n};\nexport default TasksColumnsList;\n","// import { CalendarToolbarContainer } from './CalendarToolbar.styled';\n// import PeriodPaginator from './PeriodPaginator';\n// import PeriodTypeSelect from './PeriodTypeSelect';\n\nimport ColumnsTasksList from './TasksColumn/ColumnsTasksList';\nconst ChoosedDay = () => {\n  return (\n    <div>\n      <ColumnsTasksList />\n    </div>\n  );\n};\n\nexport default ChoosedDay;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport CalendarToolbar from 'components/Calendar/CalendarToolbar/CalendarToolbar';\nimport ChoosedMonth from 'components/Calendar/ChoosedMonth/ChoosedMonth';\nimport ChoosedDay from 'components/Calendar/ChoosedDay/ChoosedDay';\nimport { useParams } from 'react-router-dom';\n\nconst CalendarPage = () => {\n  const { currentDay } = useParams();\n\n  return (\n    <CalendarContainer>\n      <H2>Calendar</H2>\n      <CalendarToolbar />\n      <ChoosedMonth />\n      {currentDay ? <ChoosedDay /> : null}\n    </CalendarContainer>\n  );\n};\n\nconst CalendarContainer = styled.div`\n  padding: 32px;\n  background-color: #f7f6f9;\n`;\nconst H2 = styled.h2`\n  font-family: Inter;\n  font-size: 32px;\n  font-weight: 700;\n  line-height: 32px;\n  letter-spacing: 0em;\n  text-align: left;\n  margin-bottom: 38px;\n  box-shadow: 0px 9.399999618530273px 57.6875px 0px rgba(0, 0, 0, 0.04);\n  box-shadow: 0px 47px 355px 0px rgba(0, 0, 0, 0.07);\n`;\n\nexport default CalendarPage;\n\n// import React from 'react';\n\n// const CalendarPage = () => {\n//     return <div>CalendarPage</div>;\n// };\n\n// export default CalendarPage;\n"],"names":["BtnPeriod","styled","CalendarToolbarContainer","Paginator","BtnLeft","BtnRight","Svg","BtnMonth","BtnDay","DAYS","getMonthYear","date","d","toDateString","split","useState","Date","currentDate","setCurrentDate","type","onClick","cb","mon","getMonth","setMonth","setFullYear","getFullYear","prevMonth","width","height","href","sprite","nextMonth","to","WeekdaysList","WeekdaysItem","map","day","style","backgroundColor","Ulka","Container","Colonka","AddTaskBtn","ColumnTitle","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","className","x1","y1","x2","y2","ColumnsTasksList","CalendarContainer","H2","currentDay","useParams"],"sourceRoot":""}