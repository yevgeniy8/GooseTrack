{"version":3,"file":"static/js/135.28a05a1c.chunk.js","mappings":"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","sources":["components/Calendar/ChoosedMonth/utils.js","components/Calendar/ChoosedMonth/ChoosedMonth.styled.jsx","components/Calendar/ChoosedMonth/CalendarTable.jsx","components/Calendar/ChoosedMonth/MonthCalendarHead.styled.jsx","components/Calendar/ChoosedMonth/MonthCalendarHead.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.jsx","redux/calendar/calendarSelector.js"],"sourcesContent":["// import moment from 'moment';\n\nexport const DAYS_MOB = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\nexport const DAYS = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n\nexport const getDaysInMonth = date => {\n    // console.log(date);\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n};\n\nexport const range = end => {\n    const { result } = Array.from({ length: end }).reduce(\n        ({ result, current }) => ({\n            result: [...result, current],\n            current: current + 1,\n        }),\n        { result: [], current: 1 }\n    );\n    return result;\n};\n\nexport const sortDays = date => {\n    const dayIndex = new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n    const sortedDays = [...DAYS.slice(dayIndex), ...DAYS.slice(0, dayIndex)];\n    return sortedDays;\n};\n\nexport const datesAreOnSameDay = (first, second) =>\n    first.getFullYear() === second.getFullYear() &&\n    first.getMonth() === second.getMonth() &&\n    first.getDate() === second.getDate();\n\nexport const getMonthYear = date => {\n    const d = date\n        .toDateString('default', {\n            month: 'long',\n        })\n        .split(' ');\n    // console.log(d);\n    return `${d[1]} ${d[3]}`;\n};\n\nexport const nextMonth = (date, cb) => {\n    const mon = date.getMonth();\n    if (mon < 11) {\n        date.setMonth(mon + 1);\n    } else {\n        date.setMonth(0);\n        date.setFullYear(date.getFullYear() + 1);\n    }\n    cb(new Date(date));\n};\n\nexport const prevMonth = (date, cb) => {\n    const mon = date.getMonth();\n    if (mon > 0) {\n        date.setMonth(mon - 1);\n    } else {\n        date.setMonth(11);\n        date.setFullYear(date.getFullYear() - 1);\n    }\n    cb(new Date(date));\n};\n\nexport const getSortedDays = date => {\n    const daysInMonth = range(getDaysInMonth(date));\n    const index = new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n    return [...Array(index === 0 ? 6 : index - 1), ...daysInMonth];\n};\n","import styled from '@emotion/styled';\n\n\nexport const Table = styled.div`\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    ${props => props.fullheight}\n    ${props =>\n        props.fullheight &&\n        `grid-template-rows: repeat(${props.is28Days ? 4 : 5}, 1fr);`}\n    div {\n        display: grid;\n        justify-content: end;\n        // max-width: 165px;\n        height: 95px;\n        background-color: white;\n        border: 1px solid rgba(220, 227, 229, 0.8);\n            @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n              max-width: 155px;\n              height: 125px;\n            };\n        span {\n            font-family: Inter;\n            font-size: 12px;\n            font-weight: 700;\n            line-height: 14px;\n            letter-spacing: 0em;\n            text-align: center;\n            width: 22px;\n            height: 22px;\n            border-radius: 8px;\n            padding: 4px;\n            margin: 8px 4px 0 0;\n            // height: fit-content;\n            color: #343434;\n                @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n                  margin: 14px 14px 0 0;\n                  font-size: 16px;\n                  font-weight: 700;\n                  line-height: 18px;\n                  width: 26px;\n                  height: 26px;\n    };\n        }\n\n        span.active {\n            color: #FFF;\n            background-color: #3E85F3;\n        }\n        // span.active::before {\n        //     color: #3e85f3;\n        //     content: 'Today   ';\n        //     font-size: 16px;\n        // }\n    }\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTasks } from 'redux/calendar/calendarOperations';\nimport { selectTasks } from 'redux/calendar/calendarSelector';\n\nimport { datesAreOnSameDay, getDaysInMonth, getSortedDays } from './utils';\nimport { Table } from './ChoosedMonth.styled';\nimport { useParams } from 'react-router';\n\nconst CalendarTable = () => {\n    const { currentDate } = useParams();\n    // console.log(currentDate); //2023-10\n\n    const date = new Date(currentDate);\n\n    const dispatch = useDispatch();\n    const tasks = useSelector(selectTasks);\n    useEffect(() => {\n        dispatch(fetchTasks());\n    }, [dispatch]);\n\n    // необходимо что бы убрать Warning\n    console.log(tasks);\n\n    // const handlePrevMonth = () => prevMonth(date, setdate);\n    // const handleNextMonth = () => nextMonth(date, setdate);\n\n    return (\n        <>\n            <Table fullheight={true} is28Days={getDaysInMonth(date) === 28}>\n                {getSortedDays(date).map((day, index) => (\n                    <div\n                        key={index}\n                        id={`${date.getFullYear()}-${\n                            date.getMonth() + 1\n                        }-${day}`}\n                    >\n                        <span\n                            className={`nonDRAG ${\n                                datesAreOnSameDay(\n                                    new Date(),\n                                    new Date(\n                                        date.getFullYear(),\n                                        date.getMonth(),\n                                        day\n                                    )\n                                )\n                                    ? 'active'\n                                    : ''\n                            }`}\n                        >\n                            {day}\n                        </span>\n                    </div>\n                ))}\n            </Table>\n        </>\n    );\n};\n\nexport default CalendarTable;\n","import styled from '@emotion/styled';\n\nexport const WeekdaysList = styled.ul`\n    display: flex;\n    justify-content: space-around;\n    padding: 14px 0;\n    background-color: rgba(255, 255, 255, 1);\n    border: 1px solid rgba(220, 227, 229, 0.8);\n    border-radius: 8px;\n    overflow: hidden;\n    margin-bottom: 15px;\n`;\n\nexport const WeekdaysItem = styled.li`\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 600;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: left;\n    text-transform: uppercase;\n    /* &:nth-last-child(-n + 2) {\n        color: #3e85f3;\n    } */\n\n    &:nth-last-of-type(-n + 2) {\n        color: #3e85f3;\n    }\n`;\n","import { useMediaQuery } from 'react-responsive';\nimport { WeekdaysItem, WeekdaysList } from './MonthCalendarHead.styled';\n\nimport { DAYS, DAYS_MOB } from './utils';\n\nconst MonthCalendarHead = () => {\n    \n    const isMobile = useMediaQuery({ maxWidth: 767 });\n\n    return (\n        <WeekdaysList>\n            {isMobile?DAYS_MOB.map((day, index) => (\n                <WeekdaysItem key={index}>{day}</WeekdaysItem>\n            )):DAYS.map((day, index) => (\n                <WeekdaysItem key={index}>{day}</WeekdaysItem>\n            ))}\n        </WeekdaysList>\n    );\n};\n\nexport default MonthCalendarHead;\n","import CalendarTable from './CalendarTable';\nimport MonthCalendarHead from './MonthCalendarHead';\n\nconst ChoosedMonth = () => {\n    return (\n        <div>\n            <MonthCalendarHead />\n            <CalendarTable />\n        </div>\n    );\n};\n\nexport default ChoosedMonth;\n","export const selectTasks = state => state.calendar.tasks;\n\nexport const selectError = state => state.calendar.error;\n\nexport const selectIsLoading = state => state.calendar.isLoading;\n\nexport const selectUserTask = state => state.calendar.userTask;\n"],"names":["DAYS_MOB","DAYS","getDaysInMonth","date","Date","getFullYear","getMonth","getDate","getSortedDays","end","daysInMonth","Array","from","length","reduce","_ref","result","current","concat","_toConsumableArray","index","getDay","Table","styled","_templateObject","_taggedTemplateLiteral","props","fullheight","is28Days","theme","breakpoints","m","_ref2","currentDate","useParams","dispatch","useDispatch","tasks","useSelector","selectTasks","useEffect","fetchTasks","console","log","_jsx","_Fragment","children","map","day","id","className","first","second","WeekdaysList","WeekdaysItem","_templateObject2","isMobile","useMediaQuery","maxWidth","_jsxs","MonthCalendarHead","CalendarTable","state","calendar"],"sourceRoot":""}