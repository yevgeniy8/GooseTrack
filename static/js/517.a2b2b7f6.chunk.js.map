{"version":3,"file":"static/js/517.a2b2b7f6.chunk.js","mappings":"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","sources":["components/Calendar/CalendarToolbar/CalendarToolbar.styled.jsx","components/Calendar/CalendarToolbar/PeriodTypeSelect.jsx","components/Calendar/CalendarToolbar/CalendarToolbar.jsx","components/Calendar/ChoosedMonth/utils.js","components/Calendar/ChoosedMonth/ChoosedMonth.styled.jsx","components/Calendar/ChoosedMonth/CalendarTable.jsx","components/Calendar/ChoosedMonth/MonthCalendarHead.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.jsx","components/Calendar/ChoosedDay/TasksColumn/ColumnsTasksList.styled.jsx","components/Calendar/ChoosedDay/TasksColumn/AddTaskBtn.jsx","components/Calendar/ChoosedDay/TasksColumn/ColumnsTasksList.jsx","components/Calendar/ChoosedDay/ChoosedDay.jsx","pages/CalendarPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Period = styled.div`\n    color: white;\n    font-size: 16px;\n    font-family: Inter;\n    font-weight: 700;\n    text-transform: uppercase;\n    text-align: center;\n    line-height: 18px;\n    word-wrap: break-word;\n    font-family: Inter;\n    width: 131px;\n    height: 34px;\n    padding: 8px 12px;\n    border-radius: 8px;\n    border: none;\n    background-color: #3e85f3;\n    // transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    // &:hover,\n    // &:focus {\n    //     background-color: #2b78ef;\n    // }\n`;\n\nexport const CalendarToolbarContainer = styled.div`\n    display: flex;\n    align-items: center;\n    // justify-content: space-between;\n    justify-content: flex-end;\n    margin-bottom: 32px;\n`;\n\nexport const Paginator = styled.div`\n    display: flex;\n    gap: 8px;\n    align-items: center;\n    // position: fixed;\n    margin-top: -130px;\n    margin-bottom: 105px;\n`;\n\nexport const BtnLeft = styled.button`\n    padding: 8px 10px;\n    width: 38px;\n    height: 34px;\n    background-color: #fff;\n    border: solid 1px rgba(220, 227, 229, 0.8);\n    border-radius: 8px 0 0 8px;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const BtnRight = styled.button`\n    padding: 8px 10px;\n    width: 38px;\n    height: 34px;\n    background-color: #fff;\n    border: solid 1px rgba(220, 227, 229, 0.8);\n    border-radius: 0 8px 8px 0;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const Svg = styled.svg`\n    stroke: #343434;\n`;\n\nexport const BtnMonth = styled.button`\n    width: 82px;\n    height: 34px;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 8px 0 0 8px;\n    border-right: 1px solid rgba(62, 133, 243, 0.2);\n    background-color: #e3f3ff;\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 500;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: center;\n    color: #3e85f3;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus,\n    &:active {\n        background-color: rgba(62, 133, 243, 0.2);\n    }\n`;\n\nexport const BtnDay = styled.button`\n    width: 82px;\n    height: 34px;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 0 8px 8px 0;\n    border-left: 1px solid rgba(62, 133, 243, 0.2);\n    background-color: #e3f3ff;\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 500;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: center;\n    color: #3e85f3;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus,\n    &:active {\n        background-color: rgba(62, 133, 243, 0.2);\n    }\n`;\n","import { NavLink } from 'react-router-dom';\nimport { BtnDay, BtnMonth } from \"./CalendarToolbar.styled\";\n\nconst PeriodTypeSelect = () => {\n    return ( \n        <div>\n            <NavLink to=\"/user/calendar/month/:currentDate\">\n                <BtnMonth type=\"button\">Month</BtnMonth>\n            </NavLink>\n            <NavLink to=\"/user/calendar/day/:currentDay\">\n                <BtnDay type=\"button\">Day</BtnDay>\n            </NavLink>\n            \n        </div>\n     );\n}\n \nexport default PeriodTypeSelect;","import { CalendarToolbarContainer } from \"./CalendarToolbar.styled\";\n// import PeriodPaginator from \"./PeriodPaginator\";\nimport PeriodTypeSelect from \"./PeriodTypeSelect\";\n\nconst CalendarToolbar = () => {\n    return ( \n        <CalendarToolbarContainer>\n            {/* <PeriodPaginator /> */}\n            <PeriodTypeSelect />\n        </CalendarToolbarContainer>\n     );\n}\n \nexport default CalendarToolbar;","export const DAYS = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n\nexport const getDaysInMonth = date => {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n};\n\nexport const range = (end) => {\n  const { result } = Array.from({ length: end }).reduce(\n    ({ result, current }) => ({\n      result: [...result, current],\n      current: current + 1\n    }),\n    { result: [], current: 1 }\n  );\n    return result;\n};\n\nexport const sortDays = date => {\n    const dayIndex = new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n    const sortedDays = [...DAYS.slice(dayIndex), ...DAYS.slice(0, dayIndex)];\n    return sortedDays;\n};\n\nexport const datesAreOnSameDay = (first, second) =>\n    first.getFullYear() === second.getFullYear() &&\n    first.getMonth() === second.getMonth() &&\n    first.getDate() === second.getDate();\n\nexport const getMonthYear = date => {\n    const d = date.toDateString('default', {\nmonth: 'long',\n}).split(' ');\n    // console.log(d);\n    return `${d[1]} ${d[3]}`;\n};\n\nexport const nextMonth = (date, cb) => {\n    const mon = date.getMonth();\n    if (mon < 11) {\n        date.setMonth(mon + 1);\n    } else {\n        date.setMonth(0);\n        date.setFullYear(date.getFullYear() + 1);\n    }\n    cb(new Date(date));\n};\n\nexport const prevMonth = (date, cb) => {\n    const mon = date.getMonth();\n    if (mon > 0) {\n        date.setMonth(mon - 1);\n    } else {\n        date.setMonth(11);\n        date.setFullYear(date.getFullYear() - 1);\n    }\n    cb(new Date(date));\n};\n\nexport const getSortedDays = date => {\n    const daysInMonth = range(getDaysInMonth(date));\n    const index = new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n    return [...Array(index === 0 ? 6 : index - 1), ...daysInMonth];\n};","import styled from '@emotion/styled';\n\n// export const WeekdaysBox = styled.div`\n// background-color: rgba(255, 255, 255, 1);\n// border: solid 1px rgba(220, 227, 229, 0.8);\n// border-radius: 8px;\n// `\n\n// export const CalendarContainer = styled.div`\n// position: absolute`\n\nexport const WeekdaysList = styled.ul`\n    display: flex;\n    justify-content: space-around;\n    padding: 14px 0;\n    background-color: rgba(255, 255, 255, 1);\n    border: 1px solid rgba(220, 227, 229, 0.8);\n    border-radius: 8px;\n    overflow: hidden;\n    margin-bottom: 15px;\n`;\n\nexport const WeekdaysItem = styled.li`\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 600;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: left;\n    text-transform: uppercase;\n    /* &:nth-last-child(-n + 2) {\n        color: #3e85f3;\n    } */\n\n    &:nth-last-of-type(-n + 2) {\n        color: #3e85f3;\n    }\n`;\n\nexport const Table = styled.div`\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    ${props => props.fullheight && `height: calc(100% - 75px);`}\n    ${props =>\n        props.fullheight &&\n        `grid-template-rows: repeat(${props.is28Days ? 4 : 5}, 1fr);`}\n    div {\n        display: grid;\n        max-width: 155px;\n        height: 125px;\n        background-color: white;\n        border: 1px solid rgba(220, 227, 229, 0.8);\n        span {\n            font-family: Inter;\n            font-size: 16px;\n            font-weight: 700;\n            line-height: 18px;\n            letter-spacing: 0em;\n            text-align: left;\n            text-align: right;\n            padding: 14px 14px;\n            // height: fit-content;\n            color: #343434;\n        }\n\n        span.active {\n            background-color: #e3f3ff;\n        }\n        span.active::before {\n            color: #3e85f3;\n            content: 'Today   ';\n            font-size: 16px;\n        }\n    }\n`;\n\n// .item {\n//     width: calc((100% - 10 * 5px) / 5);\n//     margin: 5px;\n//     display: flex;\n//     flex-direction: column;\n//     justify-content: space-between;\n//     gap: 8px;\n//     padding: 5px;\n//     text-align: center;\n// }\n\n// .list {\n//     display: flex;\n//     flex-direction: row;\n//     flex-wrap: wrap;\n//     justify-content: center;\n//     gap: 15px;\n//     margin: -5px;\n//     transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n// }\n","import { useState } from 'react';\n// import { useSelector } from 'react-redux';\n// import { selectCalendar } from 'redux/tasks/tasksSelector';\nimport {\n    datesAreOnSameDay,\n    getDaysInMonth,\n    getSortedDays,\n    getMonthYear,\n    nextMonth,\n    prevMonth,\n} from './utils';\nimport {\n    BtnLeft,\n    Period,\n    BtnRight,\n    Paginator,\n    Svg,\n} from '../CalendarToolbar/CalendarToolbar.styled';\nimport { Table } from './ChoosedMonth.styled';\nimport sprite from 'images/icons.svg';\n\nconst CalendarTable = () => {\n    const [currentDate, setCurrentDate] = useState(new Date());\n    // const dispatch = useDispatch();\n    // const currentDate = useSelector(selectCalendar);\n\n    const handlePrevMonth = () => prevMonth(currentDate, setCurrentDate);\n    const handleNextMonth = () => nextMonth(currentDate, setCurrentDate);\n\n    return (\n        <>\n            <Paginator>\n                <Period type=\"button\">{getMonthYear(currentDate)}</Period>\n                <div>\n                    <BtnLeft type=\"button\" onClick={handlePrevMonth}>\n                        <Svg width=\"18\" height=\"18\">\n                            <use href={`${sprite}#chevron-left`} />\n                        </Svg>\n                    </BtnLeft>\n                    <BtnRight type=\"button\" onClick={handleNextMonth}>\n                        <Svg width=\"18\" height=\"18\">\n                            <use href={`${sprite}#chevron-right`} />\n                        </Svg>\n                    </BtnRight>\n                </div>\n            </Paginator>\n            <Table\n                fullheight={true}\n                is28Days={getDaysInMonth(currentDate) === 28}\n            >\n                {getSortedDays(currentDate).map((day, index) => (\n                    <div\n                        key={index}\n                        id={`${currentDate.getFullYear()}.${\n                            currentDate.getMonth() + 1\n                        }.${day}`}\n                    >\n                        <span\n                            className={`nonDRAG ${\n                                datesAreOnSameDay(\n                                    new Date(),\n                                    new Date(\n                                        currentDate.getFullYear(),\n                                        currentDate.getMonth(),\n                                        day\n                                    )\n                                )\n                                    ? 'active'\n                                    : ''\n                            }`}\n                        >\n                            {day}\n                        </span>\n                    </div>\n                ))}\n            </Table>\n        </>\n    );\n};\n\nexport default CalendarTable;\n","import { WeekdaysItem, WeekdaysList } from './ChoosedMonth.styled';\n// import { nanoid } from 'nanoid'\n\nimport { DAYS } from './utils';\n\nconst CalendarHead = () => {\n    // const dayKey = nanoid();\n    return (\n        <WeekdaysList>\n            {DAYS.map((day, index) => (\n                <WeekdaysItem key={index}>{day}</WeekdaysItem>\n            ))}\n        </WeekdaysList>\n    );\n};\n\nexport default CalendarHead;\n","import CalendarTable from \"./CalendarTable\";\nimport CalendarHead from \"./MonthCalendarHead\";\n\nconst ChoosedMonth = () => {\n  return ( \n    <div>\n      <CalendarHead/>\n      <CalendarTable/>\n    </div>\n   );\n}\n \nexport default ChoosedMonth;\n\n\n","import styled from '@emotion/styled';\n\nexport const Ulka = styled.ul`\n  list-style: none;\n  gap: 18px;\n  display: flex;\n  flex-direction: column;\n  padding: 0px;\n`;\nexport const Container = styled.div`\n  margin-top: 18px;\n  display: flex;\n  gap: 27px;\n  ${\n    '' /* width: 1200px;\n  margin-left: auto; */\n  }\n`;\nexport const Colonka = styled.div`\n  flex-basis: calc((100% - 2 * 27px) / 3);\n  background: snow;\n  padding: 20px;\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  background: #fff;\n  min-width: 135px;\n`;\nexport const AddTaskBtn = styled.button`\n  border-radius: 8px;\n  border: 1px dashed #3e85f3;\n  background: #e3f3ff;\n\n  display: flex;\n  height: 52px;\n  width: 100%;\n\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n\n  left: 20px;\n  bottom: 20px;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n  &:hover {\n    background: #cbe6ff;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 4px #3e85f3;\n  }\n`;\nexport const TaskLi = styled.li`\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  background: #f7f6f9;\n`;\nexport const ColumnTitle = styled.h2`\n  color: #111;\n  font-family: Inter;\n  font-size: 20px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 24px; /* 120% */\n`;\n","// import React from 'react';\nimport { AddTaskBtn } from './ColumnsTasksList.styled';\n\nconst AddTaskButton = () => {\n  return (\n    <AddTaskBtn>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        className=\"feather feather-plus\"\n      >\n        <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n        <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\n      </svg>\n      Add task\n    </AddTaskBtn>\n  );\n};\n\nexport default AddTaskButton;\n","import { Ulka, Container, Colonka, ColumnTitle } from './ColumnsTasksList.styled';\n// import TaskColumnCard from '../TaskColumnCard/TaskColumnCard';\nimport AddTaskButton from './AddTaskBtn';\n\nconst TasksColumnsList = () => {\n  return (\n    <Container>\n      <Colonka>\n        <ColumnTitle>\n          To do{' '}\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"feather feather-plus\"\n          >\n            <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\n            <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\n          </svg>\n        </ColumnTitle>\n        <Ulka></Ulka>\n        <AddTaskButton />\n      </Colonka>\n      <Colonka>\n        <ColumnTitle>In progress</ColumnTitle>\n        <Ulka></Ulka>\n        <AddTaskButton />\n      </Colonka>\n      <Colonka>\n        <ColumnTitle>Done</ColumnTitle>\n        <Ulka></Ulka>\n        <AddTaskButton />\n      </Colonka>\n    </Container>\n  );\n};\nexport default TasksColumnsList;\n","// import { CalendarToolbarContainer } from './CalendarToolbar.styled';\n// import PeriodPaginator from './PeriodPaginator';\n// import PeriodTypeSelect from './PeriodTypeSelect';\n\nimport ColumnsTasksList from './TasksColumn/ColumnsTasksList';\nconst ChoosedDay = () => {\n  return (\n    <div>\n      <ColumnsTasksList />\n    </div>\n  );\n};\n\nexport default ChoosedDay;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport CalendarToolbar from 'components/Calendar/CalendarToolbar/CalendarToolbar';\nimport ChoosedMonth from 'components/Calendar/ChoosedMonth/ChoosedMonth';\nimport ChoosedDay from 'components/Calendar/ChoosedDay/ChoosedDay';\nimport { useParams } from 'react-router-dom';\n\nconst CalendarPage = () => {\n  const { currentDay } = useParams();\n\n  return (\n    <CalendarContainer>\n      <H2>Calendar</H2>\n      <CalendarToolbar />\n      <ChoosedMonth />\n      {currentDay ? <ChoosedDay /> : null}\n    </CalendarContainer>\n  );\n};\n\nconst CalendarContainer = styled.div`\n  padding: 32px;\n  background-color: #f7f6f9;\n`;\nconst H2 = styled.h2`\n  font-family: Inter;\n  font-size: 32px;\n  font-weight: 700;\n  line-height: 32px;\n  letter-spacing: 0em;\n  text-align: left;\n  margin-bottom: 38px;\n  box-shadow: 0px 9.399999618530273px 57.6875px 0px rgba(0, 0, 0, 0.04);\n  box-shadow: 0px 47px 355px 0px rgba(0, 0, 0, 0.07);\n`;\n\nexport default CalendarPage;\n\n// import React from 'react';\n\n// const CalendarPage = () => {\n//     return <div>CalendarPage</div>;\n// };\n\n// export default CalendarPage;\n"],"names":["Period","styled","CalendarToolbarContainer","Paginator","BtnLeft","BtnRight","Svg","BtnMonth","BtnDay","to","type","DAYS","getDaysInMonth","date","Date","getFullYear","getMonth","getDate","getMonthYear","d","toDateString","month","split","getSortedDays","end","daysInMonth","Array","from","length","reduce","result","current","index","getDay","WeekdaysList","WeekdaysItem","Table","props","fullheight","is28Days","useState","currentDate","setCurrentDate","onClick","cb","mon","setMonth","setFullYear","prevMonth","width","height","href","sprite","nextMonth","map","day","id","className","first","second","Ulka","Container","Colonka","AddTaskBtn","ColumnTitle","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","ColumnsTasksList","CalendarContainer","H2","currentDay","useParams"],"sourceRoot":""}