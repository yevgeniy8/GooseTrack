{"version":3,"file":"static/js/602.6514c2a8.chunk.js","mappings":"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","sources":["components/Calendar/CalendarToolbar/CalendarToolbar.styled.jsx","components/Calendar/ChoosedMonth/utils.js","components/Calendar/ChoosedMonth/ChoosedMonth.styled.jsx","components/Calendar/ChoosedMonth/CalendarTable.jsx","components/Calendar/ChoosedMonth/MonthCalendarHead.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Period = styled.div`\n    color: white;\n    font-size: 16px;\n    font-family: Inter;\n    font-weight: 700;\n    text-transform: uppercase;\n    text-align: center;\n    line-height: 18px;\n    word-wrap: break-word;\n    font-family: Inter;\n    width: 131px;\n    height: 34px;\n    padding: 8px 12px;\n    border-radius: 8px;\n    border: none;\n    background-color: #3e85f3;\n    // transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    // &:hover,\n    // &:focus {\n    //     background-color: #2b78ef;\n    // }\n`;\n\nexport const CalendarToolbarContainer = styled.div`\n\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n    display: flex;\n    align-items: center;\n    // justify-content: space-between;\n    justify-content: flex-end;\n    margin-bottom: 32px;\n    max-width: 1085px;\n    };\n`;\n\nexport const Paginator = styled.div`\n    display: flex;\n    gap: 8px;\n    align-items: center;\n    // position: fixed;\n    margin-top: -130px;\n    margin-bottom: 105px;\n`;\n\nexport const BtnLeft = styled.button`\n    padding: 8px 10px;\n    width: 38px;\n    height: 34px;\n    background-color: #fff;\n    border: solid 1px rgba(220, 227, 229, 0.8);\n    border-radius: 8px 0 0 8px;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const BtnRight = styled.button`\n    padding: 8px 10px;\n    width: 38px;\n    height: 34px;\n    background-color: #fff;\n    border: solid 1px rgba(220, 227, 229, 0.8);\n    border-radius: 0 8px 8px 0;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const Svg = styled.svg`\n    stroke: #343434;\n`;\n\nexport const BtnMonth = styled.button`\n    width: 82px;\n    height: 34px;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 8px 0 0 8px;\n    border-right: 1px solid rgba(62, 133, 243, 0.2);\n    background-color: #e3f3ff;\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 500;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: center;\n    color: #3e85f3;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus,\n    &:active {\n        background-color: rgba(62, 133, 243, 0.2);\n    }\n`;\n\nexport const BtnDay = styled.button`\n    width: 82px;\n    height: 34px;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 0 8px 8px 0;\n    border-left: 1px solid rgba(62, 133, 243, 0.2);\n    background-color: #e3f3ff;\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 500;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: center;\n    color: #3e85f3;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus,\n    &:active {\n        background-color: rgba(62, 133, 243, 0.2);\n    }\n`;\n","export const DAYS = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n\nexport const getDaysInMonth = date => {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n};\n\nexport const range = (end) => {\n  const { result } = Array.from({ length: end }).reduce(\n    ({ result, current }) => ({\n      result: [...result, current],\n      current: current + 1\n    }),\n    { result: [], current: 1 }\n  );\n    return result;\n};\n\nexport const sortDays = date => {\n    const dayIndex = new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n    const sortedDays = [...DAYS.slice(dayIndex), ...DAYS.slice(0, dayIndex)];\n    return sortedDays;\n};\n\nexport const datesAreOnSameDay = (first, second) =>\n    first.getFullYear() === second.getFullYear() &&\n    first.getMonth() === second.getMonth() &&\n    first.getDate() === second.getDate();\n\nexport const getMonthYear = date => {\n    const d = date.toDateString('default', {\nmonth: 'long',\n}).split(' ');\n    // console.log(d);\n    return `${d[1]} ${d[3]}`;\n};\n\nexport const nextMonth = (date, cb) => {\n    const mon = date.getMonth();\n    if (mon < 11) {\n        date.setMonth(mon + 1);\n    } else {\n        date.setMonth(0);\n        date.setFullYear(date.getFullYear() + 1);\n    }\n    cb(new Date(date));\n};\n\nexport const prevMonth = (date, cb) => {\n    const mon = date.getMonth();\n    if (mon > 0) {\n        date.setMonth(mon - 1);\n    } else {\n        date.setMonth(11);\n        date.setFullYear(date.getFullYear() - 1);\n    }\n    cb(new Date(date));\n};\n\nexport const getSortedDays = date => {\n    const daysInMonth = range(getDaysInMonth(date));\n    const index = new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n    return [...Array(index === 0 ? 6 : index - 1), ...daysInMonth];\n};","import styled from '@emotion/styled';\n\nexport const WeekdaysList = styled.ul`\n    display: flex;\n    justify-content: space-around;\n    padding: 14px 0;\n    background-color: rgba(255, 255, 255, 1);\n    border: 1px solid rgba(220, 227, 229, 0.8);\n    border-radius: 8px;\n    overflow: hidden;\n    margin-bottom: 15px;\n`;\n\nexport const WeekdaysItem = styled.li`\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 600;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: left;\n    text-transform: uppercase;\n    /* &:nth-last-child(-n + 2) {\n        color: #3e85f3;\n    } */\n\n    &:nth-last-of-type(-n + 2) {\n        color: #3e85f3;\n    }\n`;\n\nexport const Table = styled.div`\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    ${props => props.fullheight}\n    ${props =>\n        props.fullheight &&\n        `grid-template-rows: repeat(${props.is28Days ? 4 : 5}, 1fr);`}\n    div {\n        display: grid;\n        justify-content: end;\n        // max-width: 155px;\n        height: 95px;\n        background-color: white;\n        border: 1px solid rgba(220, 227, 229, 0.8);\n            @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n              max-width: 155px;\n              height: 125px;\n            };\n        span {\n            font-family: Inter;\n            font-size: 12px;\n            font-weight: 700;\n            line-height: 14px;\n            letter-spacing: 0em;\n            text-align: center;\n            width: 22px;\n            height: 22px;\n            border-radius: 8px;\n            padding: 4px;\n            margin: 8px 4px 0 0;\n            // height: fit-content;\n            color: #343434;\n                @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n                  margin: 14px 14px 0 0;\n                  font-size: 16px;\n                  font-weight: 700;\n                  line-height: 18px;\n                  width: 26px;\n                  height: 26px;\n    };\n        }\n\n        span.active {\n            color: #FFF;\n            background-color: #3E85F3;\n        }\n        // span.active::before {\n        //     color: #3e85f3;\n        //     content: 'Today   ';\n        //     font-size: 16px;\n        // }\n    }\n`;\n","import { useState } from 'react';\n// import { useSelector } from 'react-redux';\n// import { selectCalendar } from 'redux/tasks/tasksSelector';\nimport {\n    datesAreOnSameDay,\n    getDaysInMonth,\n    getSortedDays,\n    getMonthYear,\n    nextMonth,\n    prevMonth,\n} from './utils';\nimport {\n    BtnLeft,\n    Period,\n    BtnRight,\n    Paginator,\n    Svg,\n} from '../CalendarToolbar/CalendarToolbar.styled';\nimport { Table } from './ChoosedMonth.styled';\nimport sprite from 'images/icons.svg';\n\nconst CalendarTable = () => {\n    const [currentDate, setCurrentDate] = useState(new Date());\n    // const dispatch = useDispatch();\n    // const currentDate = useSelector(selectCalendar);\n\n    const handlePrevMonth = () => prevMonth(currentDate, setCurrentDate);\n    const handleNextMonth = () => nextMonth(currentDate, setCurrentDate);\n\n    return (\n        <>\n            <Paginator>\n                <Period type=\"button\">{getMonthYear(currentDate)}</Period>\n                <div>\n                    <BtnLeft type=\"button\" onClick={handlePrevMonth}>\n                        <Svg width=\"18\" height=\"18\">\n                            <use href={`${sprite}#chevron-left`} />\n                        </Svg>\n                    </BtnLeft>\n                    <BtnRight type=\"button\" onClick={handleNextMonth}>\n                        <Svg width=\"18\" height=\"18\">\n                            <use href={`${sprite}#chevron-right`} />\n                        </Svg>\n                    </BtnRight>\n                </div>\n            </Paginator>\n            <Table\n                fullheight={true}\n                is28Days={getDaysInMonth(currentDate) === 28}\n            >\n                {getSortedDays(currentDate).map((day, index) => (\n                    <div\n                        key={index}\n                        id={`${currentDate.getFullYear()}.${\n                            currentDate.getMonth() + 1\n                        }.${day}`}\n                    >\n                        <span\n                            className={`nonDRAG ${\n                                datesAreOnSameDay(\n                                    new Date(),\n                                    new Date(\n                                        currentDate.getFullYear(),\n                                        currentDate.getMonth(),\n                                        day\n                                    )\n                                )\n                                    ? 'active'\n                                    : ''\n                            }`}\n                        >\n                            {day}\n                        </span>\n                    </div>\n                ))}\n            </Table>\n        </>\n    );\n};\n\nexport default CalendarTable;\n","import { WeekdaysItem, WeekdaysList } from './ChoosedMonth.styled';\n// import { nanoid } from 'nanoid'\n\nimport { DAYS } from './utils';\n\nconst CalendarHead = () => {\n    // const dayKey = nanoid();\n    return (\n        <WeekdaysList>\n            {DAYS.map((day, index) => (\n                <WeekdaysItem key={index}>{day}</WeekdaysItem>\n            ))}\n        </WeekdaysList>\n    );\n};\n\nexport default CalendarHead;\n","import CalendarTable from './CalendarTable';\nimport CalendarHead from './MonthCalendarHead';\n\nconst ChoosedMonth = () => {\n    return (\n        <div>\n            <CalendarHead />\n            <CalendarTable />\n        </div>\n    );\n};\n\nexport default ChoosedMonth;\n"],"names":["Period","styled","CalendarToolbarContainer","theme","breakpoints","m","Paginator","BtnLeft","BtnRight","Svg","BtnMonth","BtnDay","DAYS","getDaysInMonth","date","Date","getFullYear","getMonth","getDate","getMonthYear","d","toDateString","month","split","getSortedDays","end","daysInMonth","Array","from","length","reduce","result","current","index","getDay","WeekdaysList","WeekdaysItem","Table","props","fullheight","is28Days","useState","currentDate","setCurrentDate","type","onClick","cb","mon","setMonth","setFullYear","prevMonth","width","height","href","sprite","nextMonth","map","day","id","className","first","second"],"sourceRoot":""}