{"version":3,"file":"static/js/829.ff51ca0a.chunk.js","mappings":"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","sources":["components/Calendar/ChoosedDay/DayCalendarHead.jsx","components/Calendar/ChoosedDay/TasksColumnsList/TasksColumnsList.styled.js","components/Calendar/ChoosedDay/TasksColumn/ColumnsTasksList.styled.js","components/Calendar/ChoosedDay/TasksColumn/AddTaskBtn.jsx","components/Calendar/ChoosedDay/TasksColumn/ColumnHeadBar.styled.js","components/Calendar/ChoosedDay/TasksColumn/ColumnHeadBar.jsx","components/Calendar/ChoosedDay/TaskColumnCard/TaskColumnCard.styled.jsx","components/Calendar/ChoosedDay/TaskColumnCard/TaskToolbar.styled.jsx","components/Calendar/ChoosedDay/TaskColumnCard/TaskToolbar.jsx","components/Calendar/ChoosedDay/TaskColumnCard/TaskColumnCard.jsx","components/Calendar/ChoosedDay/TasksColumn/ColumnsTasksList.jsx","components/Calendar/ChoosedDay/TasksColumn/TasksColumn.styled.js","components/Calendar/ChoosedDay/TasksColumn/TasksColumn.jsx","components/Calendar/ChoosedDay/TasksColumnsList/TasksColumnsList.jsx","components/Calendar/ChoosedDay/ChoosedDay.jsx","redux/calendar/calendarSelector.js"],"sourcesContent":["// import TasksColumnsList from '../TasksColumnsList/TasksColumnsList';\nconst DayCalendarHead = () => {\n  return <p>Hello world часть календаря Наташа</p>;\n};\n\nexport default DayCalendarHead;\n","import styled from '@emotion/styled';\n\nexport const ColumnList = styled.ul`\n  display: flex;\n  justify-content: flex-start;\n  gap: 16px;\n  overflow: auto hidden;\n  scroll-snap-type: x mandatory;\n\n  &::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    border-radius: 12px;\n    background: #e7e5e5;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const TaskList = styled.ul`\n  gap: 17px;\n  display: flex;\n  flex-direction: column;\n  padding: 0px;\n  overflow-y: auto;\n  max-height: 380px;\n  padding-right: 7px;\n\n  &::-webkit-scrollbar {\n    width: 8px;\n    padding: 50px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    padding: 50px;\n    border-radius: 12px;\n    background: #e7e5e5;\n  }\n`;\nexport const ColumnList = styled.ul`\n  display: flex;\n  gap: 27px;\n`;\nexport const ColumnItem = styled.li`\n  flex-basis: calc((100% - 2 * 27px) / 3);\n  background: snow;\n  padding: 20px;\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  background: #fff;\n  min-width: 135px;\n`;\nexport const BtnToAdd = styled.button`\n  color: ${({ theme }) => theme.colors.textPrimary};\n  text-align: center;\n  font-family: Inter;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 18px; /* 128.571% */\n\n  border-radius: 8px;\n  border: 1px dashed #3e85f3;\n  background: ${({ theme }) => theme.colors.backgroundSideBarCurrentPage};\n\n  margin-top: 32px;\n  margin-bottom: 28px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  height: 52px;\n  width: 100%;\n\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n  &:hover {\n    background: ${({ theme }) => theme.colors.buttonAddTaskHover};\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 4px #3e85f3;\n  }\n`;\nexport const IconX = styled.svg`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n  stroke: ${({ theme }) => theme.colors.textTitleHeader};\n\n  // @media (min-width: 768px) {\n  //   width: 34px;\n  //   height: 34px;\n  // }\n`;\n","import Icons from '../../../../images/icons.svg';\nimport { BtnToAdd, IconX } from './ColumnsTasksList.styled';\n\nconst AddTaskBtn = () => {\n    return (\n        <BtnToAdd>\n            <IconX>\n                <use href={`${Icons}#add-plus`} />\n            </IconX>\n            Add task\n        </BtnToAdd>\n    );\n};\n\nexport default AddTaskBtn;\n","import styled from '@emotion/styled';\n\nexport const ColumnHeader = styled.h2`\n  color: ${({ theme }) => theme.colors.textPrimary};\n  ${'' /* text-align: center; */}\n  font-size: 20px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.2; /* 120% */\n`;\nexport const ColumnContainer = styled.div`\n  margin-top: 27px;\n  margin-bottom: 47px;\n`;\n","import { ColumnHeader, ColumnContainer } from './ColumnHeadBar.styled';\n\nconst ColumnHeadBar = ({ header }) => {\n    return (\n        <ColumnContainer>\n            <ColumnHeader>{header}</ColumnHeader>\n        </ColumnContainer>\n    );\n};\nexport default ColumnHeadBar;\n","import styled from '@emotion/styled';\n\nexport const CardItem = styled.li`\n  ${\n    '' /* width: 300px;\n  height: 112px; */\n  }\n  padding: 14px 14px 18px 14px;\n  background: ${({ theme }) => theme.colors.backgroundPrimary};\n  border-radius: 8px;\n  border: ${({ theme }) => theme.borders.calendar};\n`;\nexport const CardContainer = styled.div`\n  width: 100%;\n`;\n\nexport const CardMain = styled.div`\n  display: flex;\n`;\nexport const CardTitle = styled.h3`\n  color: ${({ theme }) => theme.colors.textPrimary};\n  font-family: Inter;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 18px;\n  padding: 0px;\n  margin-bottom: 30px;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: flex-end;\n  gap: 8px;\n`;\n\nexport const AvatarWrapper = styled.div`\n  height: 32px;\n  width: 32px;\n  padding: 6px;\n  border-radius: 50%;\n  border: 1.8px solid #3e85f3;\n`;\n\nexport const AvatarStyle = styled.img`\n  width: 16px;\n  height: 16px;\n`;\nexport const StatusHigh = styled.p`\n  padding: 4px 12px;\n  border-radius: 4px;\n  max-height: 20px;\n  text-align: center;\n  font-size: 10px;\n  line-height: 1.2;\n  color: white;\n\n  background-color: #f00;\n`;\nexport const StatusLow = styled.p`\n  padding: 4px 12px;\n  border-radius: 4px;\n  max-height: 20px;\n  font-size: 10px;\n  line-height: 1.2;\n  color: white;\n\n  background-color: #0015ff;\n`;\n\nexport const StatusMedium = styled.p`\n  padding: 4px 12px;\n  border-radius: 4px;\n  max-height: 20px;\n  font-size: 10px;\n  line-height: 1.2;\n  color: white;\n\n  background-color: #ff7700;\n`;\n","import styled from '@emotion/styled';\n\nexport const Icon = styled.svg`\n    width: 16px;\n    height: 16px;\n    stroke: ${({ theme }) => theme.colors.iconTasks};\n`;\n\nexport const CardEditMenu = styled.ul`\n    padding: 0px;\n    gap: 10px;\n    margin-left: auto;\n    margin-right: 14px;\n    margin-top: auto;\n    display: flex;\n    list-style: none;\n`;\n\nexport const CardEditBtn = styled.button`\n    padding: 0px;\n    border: none;\n    border-radius: 2px;\n    display: flex;\n    background-color: inherit;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n\n    &:hover {\n        svg {\n            stroke: #3e85f3;\n        }\n    }\n\n    &:focus {\n        outline: none;\n        box-shadow: 0 0 2px 2px #3e85f3;\n    }\n`;\n","import Icons from '../../../../images/icons.svg';\nimport { Icon, CardEditMenu, CardEditBtn } from './TaskToolbar.styled';\nimport {} from './TaskColumnCard.styled';\n\nconst TaskToolbar = () => {\n  const handleAddClick = () => {\n    alert('Вы нажали на кнопку \"Добавить\"');\n  };\n\n  const handleEditClick = () => {\n    alert('Вы нажали на кнопку \"Редактировать\"');\n  };\n\n  const handleDeleteClick = () => {\n    alert('Вы нажали на кнопку \"Удалить\"');\n  };\n  return (\n    <>\n      <CardEditMenu>\n        <li>\n          <CardEditBtn type=\"button\" onClick={handleAddClick}>\n            <Icon>\n              <use href={`${Icons}#arrow-circle-broken-right`} />\n            </Icon>\n          </CardEditBtn>\n        </li>\n        <li>\n          <CardEditBtn type=\"button\" onClick={handleEditClick}>\n            <Icon>\n              <use href={`${Icons}#pencil`} />\n            </Icon>\n          </CardEditBtn>\n        </li>\n        <li>\n          <CardEditBtn type=\"button\" onClick={handleDeleteClick}>\n            <Icon>\n              <use href={`${Icons}#trash`} />\n            </Icon>\n          </CardEditBtn>\n        </li>\n      </CardEditMenu>\n    </>\n  );\n};\nexport default TaskToolbar;\n","import Avatar from '../../../../images/Avatar.png';\nimport {\n    CardItem,\n    CardContainer,\n    CardMain,\n    CardTitle,\n    Container,\n    AvatarWrapper,\n    AvatarStyle,\n    StatusHigh,\n    StatusMedium,\n    StatusLow,\n} from './TaskColumnCard.styled';\n// import task from '../data/tasksdata.json';\nimport TaskToolbar from './TaskToolbar';\n\nconst TaskColumnCard = ({ tasks }) => {\n    return (\n        <>\n            {tasks.map(taskData => (\n                <CardItem key={taskData._id}>\n                    <CardContainer>\n                        <CardTitle>{taskData.title}</CardTitle>\n                        <CardMain>\n                            <Container>\n                                <AvatarWrapper>\n                                    <AvatarStyle src={Avatar} alt=\"avatar\" />\n                                </AvatarWrapper>\n                                {taskData.priority === 'high' && (\n                                    <StatusHigh>{taskData.priority}</StatusHigh>\n                                )}\n                                {taskData.priority === 'medium' && (\n                                    <StatusMedium>\n                                        {taskData.priority}\n                                    </StatusMedium>\n                                )}\n                                {taskData.priority === 'low' && (\n                                    <StatusLow>{taskData.priority}</StatusLow>\n                                )}\n                            </Container>\n                            <TaskToolbar></TaskToolbar>\n                        </CardMain>\n                    </CardContainer>\n                </CardItem>\n            ))}\n        </>\n    );\n};\n\nexport default TaskColumnCard;\n","import { TaskList } from './ColumnsTasksList.styled';\n\nimport TaskColumnCard from '../TaskColumnCard/TaskColumnCard';\n\nconst ColumnsTasksList = ({ tasks }) => {\n    return (\n        <TaskList>\n            {tasks.length > 0 ? (\n                <TaskColumnCard tasks={tasks}></TaskColumnCard>\n            ) : (\n                <></>\n            )}\n        </TaskList>\n    );\n};\nexport default ColumnsTasksList;\n","import styled from '@emotion/styled';\n\nexport const TaskList = styled.ul`\n  gap: 18px;\n  display: flex;\n  flex-direction: column;\n  padding: 0px;\n`;\nexport const Column = styled.li`\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  background: ${({ theme }) => theme.colors.backgroundSecondary};\n\n  min-width: 329px;\n  padding-left: 14px;\n  padding-right: 8px;\n`;\nexport const Container = styled.div`\n  ${'' /* margin-bottom: 35px; */}\n`;\n// export const ColumnHeader = styled.div`\n//   list-style: none;\n// `;\n","import AddTaskBtn from './AddTaskBtn';\nimport ColumnHeadBar from './ColumnHeadBar';\nimport ColumnsTasksList from './ColumnsTasksList';\nimport { Column } from './TasksColumn.styled';\n\nconst TasksColumn = ({ header, tasks, value }) => {\n    const filterTasks = tasks.filter(task => task.category === value);\n    return (\n        <Column>\n            <ColumnHeadBar header={header} />\n\n            <ColumnsTasksList tasks={filterTasks} />\n            <AddTaskBtn />\n        </Column>\n    );\n};\nexport default TasksColumn;\n","import { ColumnList } from './TasksColumnsList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTasks } from 'redux/calendar/calendarOperations';\nimport { selectTasks } from 'redux/calendar/calendarSelector';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport TasksColumn from '../TasksColumn/TasksColumn';\n\nconst TasksColumnsList = () => {\n    const categoryOptions = [\n        { name: 'To do', value: 'to-do', id: 1 },\n        { name: 'In progress', value: 'in-progress', id: 2 },\n        { name: 'Done', value: 'done', id: 3 },\n    ];\n\n    const { currentDay } = useParams();\n    console.log(currentDay);\n    // const date = new Date(currentDay);\n\n    const dispatch = useDispatch();\n    const tasks = useSelector(selectTasks);\n    useEffect(() => {\n        dispatch(fetchTasks());\n    }, [dispatch]);\n\n    const filtredTasks = tasks.filter(task => task.date === currentDay);\n    console.log(tasks);\n    return (\n        <ColumnList>\n            {categoryOptions.map(option => (\n                <TasksColumn\n                    header={option.name}\n                    tasks={filtredTasks}\n                    value={option.value}\n                    key={option.id}\n                />\n            ))}\n        </ColumnList>\n    );\n};\nexport default TasksColumnsList;\n","import DayCalendarHead from './DayCalendarHead';\nimport TasksColumnsList from './TasksColumnsList/TasksColumnsList';\n\nconst ChoosedDay = () => {\n  return (\n    <>\n      <DayCalendarHead />\n\n      <TasksColumnsList />\n    </>\n  );\n};\n\nexport default ChoosedDay;\n","export const selectTasks = state => state.calendar.tasks;\n\nexport const selectError = state => state.calendar.error;\n\nexport const selectIsLoading = state => state.calendar.isLoading;\n\nexport const selectUserTask = state => state.calendar.userTask;\n"],"names":["ColumnList","styled","TaskList","BtnToAdd","theme","colors","textPrimary","backgroundSideBarCurrentPage","buttonAddTaskHover","IconX","textTitleHeader","href","Icons","ColumnHeader","ColumnContainer","header","CardItem","backgroundPrimary","borders","calendar","CardContainer","CardMain","CardTitle","Container","AvatarWrapper","AvatarStyle","StatusHigh","StatusLow","StatusMedium","Icon","iconTasks","CardEditMenu","CardEditBtn","type","onClick","alert","tasks","map","taskData","title","src","alt","priority","_id","length","Column","backgroundSecondary","value","filterTasks","filter","task","category","currentDay","useParams","console","log","dispatch","useDispatch","useSelector","selectTasks","useEffect","fetchTasks","filtredTasks","date","name","id","option","state"],"sourceRoot":""}