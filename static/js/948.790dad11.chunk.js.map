{"version":3,"file":"static/js/948.790dad11.chunk.js","mappings":"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","sources":["components/Calendar/ChoosedDay/DayCalendarHead.jsx","components/Calendar/ChoosedDay/TasksColumnsList/TasksColumnsList.styled.js","components/Calendar/ChoosedDay/TasksColumn/ColumnsTasksList.styled.js","components/TaskModal/TaskForm/TaskForm.styled.js","components/TaskModal/TaskForm/TaskForm.jsx","components/TaskModal/TaskModal.jsx","components/Calendar/ChoosedDay/TasksColumn/AddTaskBtn.jsx","components/Calendar/ChoosedDay/TasksColumn/ColumnHeadBar.styled.js","components/Calendar/ChoosedDay/TasksColumn/ColumnHeadBar.jsx","components/Calendar/ChoosedDay/TaskColumnCard/TaskColumnCard.styled.jsx","components/Calendar/ChoosedDay/TaskColumnCard/TaskToolbar.styled.jsx","components/Calendar/ChoosedDay/TaskColumnCard/TaskToolbar.jsx","components/Calendar/ChoosedDay/TaskColumnCard/TaskColumnCard.jsx","components/Calendar/ChoosedDay/TasksColumn/ColumnsTasksList.jsx","components/Calendar/ChoosedDay/TasksColumn/TasksColumn.styled.js","components/Calendar/ChoosedDay/TasksColumn/TasksColumn.jsx","components/Calendar/ChoosedDay/TasksColumnsList/TasksColumnsList.jsx","components/Calendar/ChoosedDay/ChoosedDay.jsx","components/Modal/Modal.styled.js","components/Modal/Modal.jsx","redux/calendar/calendarSelector.js","styles/media.js"],"sourcesContent":["// import TasksColumnsList from '../TasksColumnsList/TasksColumnsList';\nconst DayCalendarHead = () => {\n  return <p>Hello world часть календаря Наташа</p>;\n};\n\nexport default DayCalendarHead;\n","import styled from '@emotion/styled';\n\nexport const ColumnList = styled.ul`\n    display: flex;\n    justify-content: flex-start;\n    gap: 16px;\n    // height: 100vh;\n    overflow: auto hidden;\n    scroll-snap-type: x mandatory;\n\n    &::-webkit-scrollbar {\n        width: 8px;\n        scrollbar-placement: bottom;\n    }\n\n    &::-webkit-scrollbar-thumb {\n        border-radius: 12px;\n\n        background: ${({ theme }) => theme.colors.horizontalScroll};\n    }\n\n    &::-webkit-scrollbar-track {\n        background-color: ${({ theme }) =>\n            theme.colors.backgroundHorizontalScroll};\n    }\n`;\n","import styled from '@emotion/styled';\n\nexport const TaskList = styled.ul`\n    gap: 17px;\n    display: flex;\n    flex-direction: column;\n    padding: 0px;\n    overflow-y: auto;\n    max-height: 380px;\n    padding-right: 7px;\n\n    &::-webkit-scrollbar {\n        width: 8px;\n        padding: 50px;\n    }\n\n    &::-webkit-scrollbar-thumb {\n        padding: 50px;\n        border-radius: 12px;\n        background: #e7e5e5;\n    }\n`;\nexport const ColumnList = styled.ul`\n    display: flex;\n    gap: 27px;\n`;\nexport const ColumnItem = styled.li`\n    flex-basis: calc((100% - 2 * 27px) / 3);\n    background: snow;\n    padding: 20px;\n    border-radius: 8px;\n    border: 1px solid rgba(220, 227, 229, 0.8);\n    background: #fff;\n    min-width: 135px;\n`;\nexport const BtnToAdd = styled.button`\n    color: ${({ theme }) => theme.colors.textPrimary};\n    text-align: center;\n    font-family: Inter;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 600;\n    line-height: 18px; /* 128.571% */\n\n    border-radius: 8px;\n    border: 1px dashed #3e85f3;\n    background: ${({ theme }) => theme.colors.backgroundSideBarCurrentPage};\n\n    margin-top: 32px;\n    margin-bottom: 28px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    height: 52px;\n    width: 100%;\n\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n    &:hover {\n        background: ${({ theme }) => theme.colors.buttonAddTaskHover};\n    }\n\n    &:focus {\n        outline: none;\n        box-shadow: 0 0 4px #3e85f3;\n    }\n`;\nexport const IconX = styled.svg`\n    width: 24px;\n    height: 24px;\n    margin-right: 8px;\n    stroke: ${({ theme }) => theme.colors.textTitleHeader};\n\n    // @media (min-width: 768px) {\n    //   width: 34px;\n    //   height: 34px;\n    // }\n`;\n","// import styled from '@emotion/styled'; \nimport styled from 'styled-components';\n\nimport {\n    Form as FormikForm,\n    Field,\n    ErrorMessage as FormikErrorMessage,\n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n    position: relative;\n    width: 303px;\n    max-height: 420px;\n    padding: 48px 18px 40px;\n    background-color: #fff;\n   \n\n    border-radius: 8px;\n    border: #fff;\n\n    @media (min-width: 768px) {\n        width: 396px;\n        padding: 40px 28px;\n    }\n`;\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n\n    color: rgba(52, 52, 52, 0.8);\n\n    font-size: 12px;\n    font-family: Inter;\n    font-weight: 500;\n    line-height: 14px;\n`;\n\nexport const InputTitle = styled(Field)`\n    width: 267px;\n    height: 42px;\n    padding: 12px 14px;\n    border-radius: 8px;\n    background: #f6f6f6;\n    border: 1px solid #f6f6f6;\n\n    color: #343434;\n    font-size: 14px;\n    font-family: Inter;\n    font-weight: 600;\n    line-height: 18px;\n\n    @media (min-width: 768px) {\n        width: 340px;\n        height: 46px;\n        padding: 14px 18px;\n    }\n\n    &::placeholder {\n        opacity: 1;\n        color: #343434;\n        font-size: 14px;\n        font-family: Inter;\n        font-weight: 600;\n        line-height: 18px;\n    }\n`;\n\nexport const TimeWrapper = styled.div`\n    display: flex;\n    gap: 14px;\n    margin-top: 16px;\n\n    @media (min-width: 768px) {\n        margin-top: 18px;\n    }\n`;\n\nexport const InputTime = styled(Field)`\n    width: 126px;\n    height: 42px;\n    padding: 12px 14px;\n    border-radius: 8px;\n    background: #f6f6f6;\n    border: 1px solid #f6f6f6;\n    cursor: pointer;\n\n    color: #343434;\n    font-size: 14px;\n    font-family: Inter;\n    font-weight: 600;\n    line-height: 18px;\n\n    @media (min-width: 768px) {\n        width: 163px;\n        height: 46px;\n        padding: 14px 18px;\n    }\n\n    &::-webkit-calendar-picker-indicator {\n        display: none;\n    }\n`;\n\nexport const RadioWrapper = styled.div`\n    display: flex;\n    gap: 16px;\n`;\n\nexport const RadioField = styled(Field)`\n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n`;\n\nexport const RadioLabel = styled.label`\n    position: relative;\n    padding-left: 16px;\n    display: flex;\n    align-items: center;\n    margin-top: 16px;\n\n    color: #343434;\n    font-size: 12px;\n    font-family: Inter;\n    font-weight: 600;\n    line-height: 14px;\n    cursor: pointer;\n\n    @media (min-width: 768px) {\n        font-size: 14px;\n        line-height: 18px;\n        margin-top: 28px;\n    }\n`;\n\nexport const RadioSpan = styled.span`\n    position: absolute;\n    left: 0;\n    width: 10px;\n    height: 10px;\n    border-radius: 50%;\n    background-color: ${({value}) => {\n        switch (value) {\n            case 'low':\n                return '#72C2F8';\n            case 'medium':\n                return '#F3B249';\n            case 'high':\n                return '#EA3D65';\n            default:\n                return 'black';\n        }\n    }};\n\n    ${RadioLabel}:nth-child(1) ${RadioField}:checked + & {\n        outline: 1.2px solid #72c2f8;\n        outline-offset: 1px;\n    }\n\n    ${RadioLabel}:nth-child(2) ${RadioField}:checked + & {\n        outline: 1.2px solid #f3b249;\n        outline-offset: 1px;\n    }\n\n    ${RadioLabel}:nth-child(3) ${RadioField}:checked + & {\n        outline: 1.2px solid #ea3d65;\n        outline-offset: 1px;\n    }\n`;\n\nexport const ButtonWrapper = styled.div`\n    display: flex;\n    gap: 14px;\n    margin-top: 32px;\n`;\n\nexport const ButtonAction = styled.button`\n    display: flex;\n    width: 135px;\n    height: 42px;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    padding: 12px;\n\n    border-radius: 8px;\n    border: none;\n    background-color: #3e85f3;\n    cursor: pointer;\n\n    color: #fff;\n    text-align: center;\n    font-size: 14px;\n    font-family: Inter;\n    font-weight: 600;\n    line-height: 18px;\n\n    transition: background-color 250ms linear;\n\n    &:hover,\n    &:focus {\n        background-color: #2b78ef;\n    }\n\n    @media (min-width: 768px) {\n        width: 182px;\n        height: 48px;\n        padding: 15px;\n    }\n`;\n\nexport const ButtonCancel = styled.button`\n    width: 118px;\n    height: 42px;\n    padding: 12px;\n\n    border-radius: 8px;\n    border: none;\n    background: #efefef;\n    cursor: pointer;\n\n    color: #111;\n    text-align: center;\n    font-size: 14px;\n    font-family: Inter;\n    font-weight: 600;\n    line-height: 18px;\n\n    transition: background-color 250ms linear;\n\n    &:hover,\n    &:focus {\n        background-color: #e7e3e3;\n    }\n\n    @media (min-width: 768px) {\n        width: 182px;\n        height: 48px;\n        padding: 15px;\n    }\n`;\n\nexport const ButtonCloseWrap = styled.button`\n    position: absolute;\n    top: 14px;\n    right: 18px;\n\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n    stroke: #111111;\n\n    transition: stroke 300ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover,\n    &:focus {\n        stroke: #2b78ef;\n    }\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n    margin-left: 18px;\n    max-width: 100%;\n    color: #da1414;\n    font-size: 12px;\n    font-family: Inter;\n    line-height: 14px;\n`;\n","import { Formik } from 'formik';\n// import * as Yup from 'yup';\n\nimport close from '../../../images/icons.svg';\n\nimport {\n    ButtonAction,\n    ButtonCancel,\n    ButtonCloseWrap,\n    ButtonWrapper,\n    ErrorMessage,\n    Form,\n    InputTime,\n    InputTitle,\n    Label,\n    RadioField,\n    RadioLabel,\n    RadioSpan,\n    RadioWrapper,\n    TimeWrapper,\n} from './TaskForm.styled';\n\nimport { addTask } from 'redux/calendar/calendarOperations';\n\nimport { useDispatch } from 'react-redux';\n\n// const TaskSchema = Yup.object().shape({\n//     title: Yup.string()\n//         .max(250, 'Title is too long')\n//         .required('Title is required'),\n//     start: Yup.string().required('Start time is required'),\n//     end: Yup.string()\n//         .required('End time is required')\n//         .test(\n//             'is-greater',\n//             'End time should be greater than start time',\n//             function (value) {\n//                 const { start } = this.parent;\n//                 if (start && value) {\n//                     const startTime = new Date(`2000-01-01T${start}`);\n//                     const endTime = new Date(`2000-01-01T${value}`);\n//                     return endTime > startTime;\n//                 }\n//                 return true;\n//             }\n//         ),\n//     priority: Yup.string()\n//         .oneOf(['low', 'medium', 'high'])\n//         .required('Priority is required'),\n//     date: Yup.date()\n//         .required('Date is required')\n//         .transform((value, originalValue) => {\n//             if (originalValue) {\n//                 const [year, month, day] = originalValue.split('-');\n//                 return new Date(\n//                     `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`\n//                 );\n//             }\n//             return value;\n//         }),\n//     category: Yup.string()\n//         .oneOf(['to-do', 'in-progress', 'done'])\n//         .required('Category is required'),\n// });\n\nexport const TaskForm = ({ onClose, action }) => {\n    const dispatch = useDispatch();\n\n    const handleSubmit = (values, actions) => {\n        // console.log(values);\n\n        const currentDate = new Date();\n        const dateString = currentDate.toLocaleDateString();\n        // console.log(dateString.split('.').reverse().join('-'));\n\n        const obj = {\n            ...values,\n            category: 'to-do',\n            date: dateString.split('.').reverse().join('-'),\n        };\n        console.log(obj);\n        dispatch(addTask(obj));\n        onClose();\n    };\n\n    return (\n        <Formik\n            // initialValues=\n            // {{\n            // title: (action === 'edit' && title) || '',\n            // start: (action === 'edit' && start) || '09:00',\n            // end: (action === 'edit' && end) || '10:00',\n            // priority: (action === 'edit' && priority) || 'low',\n            // }}\n            // validationSchema={TaskSchema}\n            initialValues={{\n                // name: ['low', 'medium', 'high'],\n                title: '',\n                start: '',\n                end: '',\n            }}\n            onSubmit={handleSubmit}\n        >\n            {({\n                values,\n                errors,\n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                isSubmitting,\n                /* and other goodies */\n            }) => (\n                <Form>\n                    <Label>\n                        Title\n                        <InputTitle\n                            type=\"text\"\n                            name=\"title\"\n                            placeholder=\"Enter text\"\n                            value={values.title}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                        />\n                        <ErrorMessage name=\"title\" component=\"div\" />\n                    </Label>\n\n                    <TimeWrapper>\n                        <Label>\n                            Start\n                            <InputTime\n                                type=\"time\"\n                                name=\"start\"\n                                value={values.start}\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                            />\n                            <ErrorMessage name=\"start\" component=\"div\" />\n                        </Label>\n                        <Label>\n                            End\n                            <InputTime\n                                type=\"time\"\n                                name=\"end\"\n                                value={values.end}\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                            />\n                            <ErrorMessage name=\"end\" component=\"div\" />\n                        </Label>\n                    </TimeWrapper>\n\n                    <RadioWrapper role=\"group\" aria-labelledby=\"my-radio-group\">\n                        <RadioLabel>\n                            <RadioField\n                                type=\"radio\"\n                                name=\"priority\"\n                                value=\"low\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                            />\n                            <RadioSpan value=\"low\" />\n                            Low\n                        </RadioLabel>\n                        <RadioLabel>\n                            <RadioField\n                                type=\"radio\"\n                                name=\"priority\"\n                                value=\"medium\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                            />\n                            <RadioSpan value=\"medium\" />\n                            Medium\n                        </RadioLabel>\n                        <RadioLabel>\n                            <RadioField\n                                type=\"radio\"\n                                name=\"priority\"\n                                value=\"high\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                            />\n                            <RadioSpan value=\"high\" />\n                            High\n                        </RadioLabel>\n                    </RadioWrapper>\n\n                    {/* <button type=\"submit\">Ok</button> */}\n\n                    <ButtonWrapper>\n                        <ButtonAction type=\"submit\">\n                            {action === 'edit' ? 'Edit' : 'Add'}\n                        </ButtonAction>\n                        <ButtonCancel type=\"button\" onClick={onClose}>\n                            Cancel\n                        </ButtonCancel>\n                    </ButtonWrapper>\n\n                    <ButtonCloseWrap\n                        type=\"button\"\n                        aria-label=\"close button\"\n                        onClick={onClose}\n                    >\n                        <svg width=\"24\" height=\"24\">\n                            <use href={`${close}#x-close`} />\n                        </svg>\n                    </ButtonCloseWrap>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n","import  Modal  from '../Modal/Modal';\nimport { TaskForm } from './TaskForm/TaskForm';\n\nexport const TaskModal = ({ closeModal}) => {\n    return (\n        <Modal onClose={closeModal}>\n            <TaskForm onClose={closeModal} />\n        </Modal>\n    );\n};","import Icons from '../../../../images/icons.svg';\nimport { BtnToAdd, IconX } from './ColumnsTasksList.styled';\nimport { TaskModal } from '../../../TaskModal/TaskModal';\nimport React, { useState } from 'react';\n\nconst AddTaskBtn = () => {\n         const [modalOpen, setModalOpen] = useState(false);\n        \n        const openModal = () => setModalOpen(true);\n    const closeModal = () => {\n        setModalOpen(false);\n    };\n    return (\n        <div>\n        <BtnToAdd onClick={openModal}>\n            <IconX>\n                <use href={`${Icons}#add-plus`} />\n            </IconX>\n            Add task\n        </BtnToAdd>\n            {modalOpen && <TaskModal closeModal={closeModal} />}\n        </div>\n\n    );\n};\n\nexport default AddTaskBtn;\n","import styled from '@emotion/styled';\n\nexport const ColumnHeader = styled.h2`\n  color: ${({ theme }) => theme.colors.textPrimary};\n  ${'' /* text-align: center; */}\n  font-size: 20px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.2; /* 120% */\n`;\nexport const ColumnContainer = styled.div`\n  margin-top: 27px;\n  margin-bottom: 47px;\n`;\n","import { ColumnHeader, ColumnContainer } from './ColumnHeadBar.styled';\n\nconst ColumnHeadBar = ({ header }) => {\n    return (\n        <ColumnContainer>\n            <ColumnHeader>{header}</ColumnHeader>\n        </ColumnContainer>\n    );\n};\nexport default ColumnHeadBar;\n","import styled from '@emotion/styled';\n\nexport const CardItem = styled.li`\n    ${\n        '' /* width: 300px;\n  height: 112px; */\n    }\n    padding: 14px 14px 18px 14px;\n    background: ${({ theme }) => theme.colors.backgroundPrimary};\n    border-radius: 8px;\n    border: ${({ theme }) => theme.borders.calendar};\n`;\nexport const CardContainer = styled.div`\n    width: 100%;\n`;\n\nexport const CardMain = styled.div`\n    display: flex;\n`;\nexport const CardTitle = styled.h3`\n    color: ${({ theme }) => theme.colors.textPrimary};\n    font-family: Inter;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 18px;\n    padding: 0px;\n    margin-bottom: 30px;\n`;\n\nexport const Container = styled.div`\n    display: flex;\n    align-items: flex-end;\n    gap: 8px;\n`;\n\nexport const AvatarWrapper = styled.div`\n    height: 32px;\n    width: 32px;\n    padding: 6px;\n    border-radius: 50%;\n    border: 1.8px solid #3e85f3;\n`;\n\nexport const AvatarStyle = styled.img`\n    width: 16px;\n    height: 16px;\n`;\nexport const StatusHigh = styled.p`\n    padding: 4px 12px;\n    border-radius: 4px;\n    max-height: 20px;\n    text-align: center;\n    font-size: 10px;\n    line-height: 1.2;\n    color: white;\n\n    background-color: #f00;\n`;\nexport const StatusLow = styled.p`\n    padding: 4px 12px;\n    border-radius: 4px;\n    max-height: 20px;\n    font-size: 10px;\n    line-height: 1.2;\n    color: white;\n\n    background-color: #0015ff;\n`;\n\nexport const StatusMedium = styled.p`\n    padding: 4px 12px;\n    border-radius: 4px;\n    max-height: 20px;\n    font-size: 10px;\n    line-height: 1.2;\n    color: white;\n\n    background-color: #ff7700;\n`;\n","import styled from '@emotion/styled';\n\nexport const Icon = styled.svg`\n    width: 16px;\n    height: 16px;\n    stroke: ${({ theme }) => theme.colors.iconTasks};\n`;\n\nexport const CardEditMenu = styled.ul`\n    padding: 0px;\n    gap: 10px;\n    margin-left: auto;\n    margin-right: 14px;\n    margin-top: auto;\n    display: flex;\n    list-style: none;\n`;\n\nexport const CardEditBtn = styled.button`\n    padding: 0px;\n    border: none;\n    border-radius: 2px;\n    display: flex;\n    background-color: inherit;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n\n    &:hover {\n        svg {\n            stroke: #3e85f3;\n        }\n    }\n\n    &:focus {\n        outline: none;\n        box-shadow: 0 0 2px 2px #3e85f3;\n    }\n`;\n","import Icons from '../../../../images/icons.svg';\nimport { Icon, CardEditMenu, CardEditBtn } from './TaskToolbar.styled';\nimport {} from './TaskColumnCard.styled';\n\nconst TaskToolbar = () => {\n  const handleAddClick = () => {\n    alert('Вы нажали на кнопку \"Добавить\"');\n  };\n\n  const handleEditClick = () => {\n    alert('Вы нажали на кнопку \"Редактировать\"');\n  };\n\n  const handleDeleteClick = () => {\n    alert('Вы нажали на кнопку \"Удалить\"');\n  };\n  return (\n    <>\n      <CardEditMenu>\n        <li>\n          <CardEditBtn type=\"button\" onClick={handleAddClick}>\n            <Icon>\n              <use href={`${Icons}#arrow-circle-broken-right`} />\n            </Icon>\n          </CardEditBtn>\n        </li>\n        <li>\n          <CardEditBtn type=\"button\" onClick={handleEditClick}>\n            <Icon>\n              <use href={`${Icons}#pencil`} />\n            </Icon>\n          </CardEditBtn>\n        </li>\n        <li>\n          <CardEditBtn type=\"button\" onClick={handleDeleteClick}>\n            <Icon>\n              <use href={`${Icons}#trash`} />\n            </Icon>\n          </CardEditBtn>\n        </li>\n      </CardEditMenu>\n    </>\n  );\n};\nexport default TaskToolbar;\n","import Avatar from '../../../../images/Avatar.png';\nimport {\n    CardItem,\n    CardContainer,\n    CardMain,\n    CardTitle,\n    Container,\n    AvatarWrapper,\n    AvatarStyle,\n    StatusHigh,\n    StatusMedium,\n    StatusLow,\n} from './TaskColumnCard.styled';\n// import task from '../data/tasksdata.json';\nimport TaskToolbar from './TaskToolbar';\n\nconst TaskColumnCard = ({ tasks }) => {\n    return (\n        <>\n            {tasks.map(taskData => (\n                <CardItem key={taskData._id}>\n                    <CardContainer>\n                        <CardTitle>{taskData.title}</CardTitle>\n                        <CardMain>\n                            <Container>\n                                <AvatarWrapper>\n                                    <AvatarStyle src={Avatar} alt=\"avatar\" />\n                                </AvatarWrapper>\n                                {taskData.priority === 'high' && (\n                                    <StatusHigh>{taskData.priority}</StatusHigh>\n                                )}\n                                {taskData.priority === 'medium' && (\n                                    <StatusMedium>\n                                        {taskData.priority}\n                                    </StatusMedium>\n                                )}\n                                {taskData.priority === 'low' && (\n                                    <StatusLow>{taskData.priority}</StatusLow>\n                                )}\n                            </Container>\n                            <TaskToolbar></TaskToolbar>\n                        </CardMain>\n                    </CardContainer>\n                </CardItem>\n            ))}\n        </>\n    );\n};\n\nexport default TaskColumnCard;\n","import { TaskList } from './ColumnsTasksList.styled';\n\nimport TaskColumnCard from '../TaskColumnCard/TaskColumnCard';\n\nconst ColumnsTasksList = ({ tasks }) => {\n    return (\n        <TaskList>\n            {tasks.length > 0 ? (\n                <TaskColumnCard tasks={tasks}></TaskColumnCard>\n            ) : (\n                <></>\n            )}\n        </TaskList>\n    );\n};\nexport default ColumnsTasksList;\n","import styled from '@emotion/styled';\nimport { tablet, min } from '../../../../styles/media';\n\nexport const TaskList = styled.ul`\n    gap: 18px;\n    display: flex;\n    flex-direction: column;\n    padding: 0px;\n`;\nexport const Column = styled.li`\n    border-radius: 8px;\n    border: ${({ theme }) => theme.borders.calendar};\n    background: ${({ theme }) => theme.colors.backgroundSecondary};\n    margin-bottom: auto;\n    min-width: 335px;\n    padding-left: 14px;\n    padding-right: 8px;\n\n    ${min(tablet)} {\n        min-width: 344px;\n    }\n`;\nexport const Container = styled.div`\n    ${'' /* margin-bottom: 35px; */}\n`;\n// export const ColumnHeader = styled.div`\n//   list-style: none;\n// `;\n","import AddTaskBtn from './AddTaskBtn';\nimport ColumnHeadBar from './ColumnHeadBar';\nimport ColumnsTasksList from './ColumnsTasksList';\nimport { Column } from './TasksColumn.styled';\n\nconst TasksColumn = ({ header, tasks, value }) => {\n    const filterTasks = tasks.filter(task => task.category === value);\n    return (\n        <Column>\n            <ColumnHeadBar header={header} />\n\n            <ColumnsTasksList tasks={filterTasks} />\n            <AddTaskBtn />\n        </Column>\n    );\n};\nexport default TasksColumn;\n","import { ColumnList } from './TasksColumnsList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTasks } from 'redux/calendar/calendarOperations';\nimport { selectTasks } from 'redux/calendar/calendarSelector';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport TasksColumn from '../TasksColumn/TasksColumn';\n\nconst TasksColumnsList = () => {\n    const categoryOptions = [\n        { name: 'To do', value: 'to-do', id: 1 },\n        { name: 'In progress', value: 'in-progress', id: 2 },\n        { name: 'Done', value: 'done', id: 3 },\n    ];\n\n    const { currentDay } = useParams();\n    console.log(currentDay);\n    // const date = new Date(currentDay);\n\n    const dispatch = useDispatch();\n    const tasks = useSelector(selectTasks);\n    useEffect(() => {\n        dispatch(fetchTasks());\n    }, [dispatch]);\n\n    const filtredTasks = tasks.filter(task => task.date === currentDay);\n    console.log(tasks);\n    return (\n        <ColumnList>\n            {categoryOptions.map(option => (\n                <TasksColumn\n                    header={option.name}\n                    tasks={filtredTasks}\n                    value={option.value}\n                    key={option.id}\n                />\n            ))}\n        </ColumnList>\n    );\n};\nexport default TasksColumnsList;\n","import DayCalendarHead from './DayCalendarHead';\nimport TasksColumnsList from './TasksColumnsList/TasksColumnsList';\n\nconst ChoosedDay = () => {\n  return (\n    <>\n      <DayCalendarHead />\n\n      <TasksColumnsList />\n    </>\n  );\n};\n\nexport default ChoosedDay;\n","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n    position: fixed;\n    z-index: 999;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.1);\n`;\n\nexport const Modal = styled.div`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`; \n","import { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport { Backdrop, Modal } from './Modal.styled';\n\nconst rootModal = document.querySelector('#modal');\n\nconst CreateModal = ({ children, onClose, }) => {\n    useEffect(() => {\n        const handleKeyDown = e => {\n            if (e.code === 'Escape') {\n                onClose();\n            }\n        };\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [onClose]);\n\n    const handleClose = e => {\n        if (e.target === e.currentTarget) {\n            onClose();\n        }\n    };\n    return createPortal(\n        <Backdrop onClick={handleClose} >\n            <Modal >\n                    <div>{children}</div>\n            </Modal>\n        </Backdrop>,\n        rootModal\n    );\n};\n\nexport default CreateModal;\n","export const selectTasks = state => state.calendar.tasks;\n\nexport const selectError = state => state.calendar.error;\n\nexport const selectIsLoading = state => state.calendar.isLoading;\n\nexport const selectUserTask = state => state.calendar.userTask;\n","const media = {\n    mobile: 375,\n    tablet: 768,\n    desktop: 1440,\n};\n\nconst { mobile, tablet, desktop } = media;\n\nconst min = bp => `@media screen and (min-width: ${bp}px)`;\nconst max = bp => `@media screen and (max-width: ${bp}px)`;\n\nexport { mobile, tablet, desktop, min, max };\n"],"names":["_jsx","children","ColumnList","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","colors","horizontalScroll","_ref2","backgroundHorizontalScroll","TaskList","BtnToAdd","_templateObject2","_templateObject3","_templateObject4","textPrimary","backgroundSideBarCurrentPage","_ref3","buttonAddTaskHover","IconX","_templateObject5","_ref4","textTitleHeader","Form","FormikForm","Label","InputTitle","Field","TimeWrapper","InputTime","RadioWrapper","_templateObject6","RadioField","_templateObject7","RadioLabel","_templateObject8","RadioSpan","_templateObject9","value","ButtonWrapper","_templateObject10","ButtonAction","_templateObject11","ButtonCancel","_templateObject12","ButtonCloseWrap","_templateObject13","ErrorMessage","FormikErrorMessage","_templateObject14","TaskForm","onClose","action","dispatch","useDispatch","Formik","initialValues","title","start","end","onSubmit","values","actions","dateString","Date","toLocaleDateString","obj","_objectSpread","category","date","split","reverse","join","console","log","addTask","handleChange","errors","touched","handleBlur","handleSubmit","isSubmitting","_jsxs","type","name","placeholder","onBlur","onChange","component","role","onClick","width","height","href","concat","close","TaskModal","closeModal","Modal","_useState","useState","_useState2","_slicedToArray","modalOpen","setModalOpen","Icons","ColumnHeader","ColumnContainer","header","CardItem","backgroundPrimary","borders","calendar","CardContainer","CardMain","CardTitle","Container","AvatarWrapper","AvatarStyle","StatusHigh","StatusLow","StatusMedium","Icon","iconTasks","CardEditMenu","CardEditBtn","_Fragment","alert","tasks","map","taskData","src","alt","priority","TaskToolbar","_id","length","TaskColumnCard","Column","backgroundSecondary","min","tablet","filterTasks","filter","task","ColumnHeadBar","ColumnsTasksList","AddTaskBtn","currentDay","useParams","useSelector","selectTasks","useEffect","fetchTasks","filtredTasks","id","option","TasksColumn","DayCalendarHead","TasksColumnsList","Backdrop","rootModal","document","querySelector","handleKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","target","currentTarget","state","mobile","desktop","bp"],"sourceRoot":""}