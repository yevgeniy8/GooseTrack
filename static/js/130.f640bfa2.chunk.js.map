{"version":3,"file":"static/js/130.f640bfa2.chunk.js","mappings":"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","sources":["components/Calendar/CalendarToolbar/CalendarToolbar.styled.jsx","components/Calendar/CalendarToolbar/CalendarToolbar.jsx","pages/CalendarPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const ToolbarContainer = styled.div`\n  margin-bottom: 24px;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nexport const PeriodTypeSelect = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 18px;\n  gap: 8px;\n`;\n\nexport const DateBox = styled.div`\n  background-color: #3e85f3;\n  width: 148px;\n  display: flex;\n  padding: 6px 10px;\n  justify-content: center;\n  align-items: center;\n  border-radius: 8px;\n`;\n\nexport const Date = styled.span`\n  text-transform: uppercase;\n  color: white;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 18px;\n`;\n\nexport const ToggleBox = styled.div`\n  display: flex;\n  background-color: #fff;\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  border-radius: 8px;\n  gap: 1px;\n  overflow: hidden;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const ToggleBtn = styled.div`\n  padding: 7px 10px;\n  background-color: #fff;\n`;\n\nexport const Icon = styled.svg`\n  stroke: #DCE3E5;\n&:hover {\n    stroke: #343434;\n  }\n`;\n\nexport const BtnLeft = styled.button`\n    padding: 8px 10px;\n    width: 38px;\n    height: 34px;\n    background-color: #fff;\n    border: solid 1px rgba(220, 227, 229, 0.8);\n    border-radius: 8px 0 0 8px;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover {\n    stroke: #343434;\n  }\n`;\n\nexport const BtnRight = styled.button`\n    padding: 8px 10px;\n    width: 38px;\n    height: 34px;\n    background-color: #fff;\n    border: solid 1px rgba(220, 227, 229, 0.8);\n    border-radius: 0 8px 8px 0;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover {\n     stroke: #343434;\n  }\n`;\n\nexport const PeriodPaginator = styled.div`\n  display: flex;\n  border-radius: 8px;\n  overflow: hidden;\n  height: 34px;\n`;\n\nexport const Period = styled.div`\n  width: 76px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px 0;\n  background-color: rgba(62, 133, 243, 0.2);\n`;\n\nexport const BtnMonth = styled.button`\n    width: 82px;\n    height: 34px;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 8px 0 0 8px;\n    border-right: 1px solid rgba(62, 133, 243, 0.2);\n    background-color: #e3f3ff;\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 500;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: center;\n    color: #3e85f3;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus,\n    &:active {\n        background-color: rgba(62, 133, 243, 0.2);\n    }\n`;\n\nexport const BtnDay = styled.button`\n    width: 82px;\n    height: 34px;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 0 8px 8px 0;\n    border-left: 1px solid rgba(62, 133, 243, 0.2);\n    background-color: #e3f3ff;\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 500;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: center;\n    color: #3e85f3;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus,\n    &:active {\n        background-color: rgba(62, 133, 243, 0.2);\n    }\n`;\n\nexport const TypeLink = styled(NavLink)`\n  text-decoration: none;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 18px;\n  color: #3e85f3;\n`;\n\n\n","import { Link } from 'react-router-dom';\nimport moment from 'moment';\n\nimport sprite from 'images/icons.svg';\n\nimport {\n  Date,\n  DateBox,\n  PeriodPaginator,\n  PeriodTypeSelect,\n  Icon,\n  ToolbarContainer,\n  TypeLink,\n  BtnRight,\n  BtnLeft,\n  BtnMonth,\n  BtnDay,\n} from './CalendarToolbar.styled';\n\nconst CalendarToolbar = ({\n  currentDate,\n  setCurrentDate,\n  format,\n  setFormat,\n}) => {\n  const month = moment(currentDate).format('YYYY-MM');\n  const day = moment(currentDate).format('YYYY-MM-DD');\n\n   const handlePrevDate = format => {\n    const date = moment(currentDate).subtract(1, format).format('YYYY-MM-DD');\n    setCurrentDate(date);\n    localStorage.setItem('date', date);\n  };\n\n   const handleNextDate = format => {\n    const date = moment(currentDate).add(1, format).format('YYYY-MM-DD');\n    setCurrentDate(date);\n    localStorage.setItem('date', date);\n  };\n  \n  const handleChangePeriod = evt => {\n    switch (evt.currentTarget.textContent) {\n      case 'Month':\n        setFormat('month');\n        localStorage.setItem('type', 'month');\n        break;\n      case 'Day':\n        setFormat('day');\n        localStorage.setItem('type', 'day');\n        break;\n      default:\n        return format;\n    }\n  };\n\n  return (\n    <ToolbarContainer>\n      <PeriodTypeSelect>\n        <DateBox>\n          <Date>\n            {moment(currentDate).format(\n              format === 'day' ? 'DD MMM YYYY' : 'MMMM YYYY'\n            )}\n          </Date>\n        </DateBox>\n        <div>\n          <Link\n            to={format === 'month' ? `month/${month}` : `day/${day}`}\n            onClick={() => handlePrevDate(format)}\n          >\n            <BtnLeft type=\"button\">\n              <Icon width=\"18\" height=\"18\">\n                <use href={`${sprite}#chevron-left`}/>\n              </Icon>\n            </BtnLeft>\n          </Link>\n          <Link\n            to={format === 'month' ? `month/${month}` : `day/${day}`}\n            onClick={() => handleNextDate(format)}\n          >\n            <BtnRight type=\"button\">\n              <Icon width=\"18\" height=\"18\">\n                <use href={`${sprite}#chevron-right`}/>\n              </Icon>\n            </BtnRight>\n          </Link>\n        </div>\n      </PeriodTypeSelect>\n      <PeriodPaginator>\n        <BtnMonth type=\"button\">\n          <TypeLink to={`month/${month}`} onClick={handleChangePeriod}>\n            Month\n          </TypeLink>\n        </BtnMonth>\n        <BtnDay type=\"button\">\n          <Link to={`day/${day}`} onClick={handleChangePeriod}>\n            Day\n          </Link>\n        </BtnDay>\n      </PeriodPaginator>\n    </ToolbarContainer>\n  );\n};\n\nexport default CalendarToolbar;\n","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport CalendarToolbar from 'components/Calendar/CalendarToolbar/CalendarToolbar';\nimport { Outlet, useNavigate } from 'react-router';\nimport moment from 'moment';\n\nconst CalendarPage = () => {\n  const navigate = useNavigate();\n  const [currentDate, setCurrentDate] = useState(\n    localStorage.getItem('date') || moment().format('YYYY-MM-DD').toString()\n  );\n  const [format, setFormat] = useState(localStorage.getItem('type') || 'month');\n\n  useEffect(() => {\n    let date;\n    switch (format) {\n      case 'month':\n        date = moment(currentDate).format('YYYY-MM');\n        navigate(`/calendar/month/${date}`);\n        break;\n      case 'day':\n        date = moment(currentDate).format('YYYY-MM-DD');\n        navigate(`/calendar/day/${date}`);\n        break;\n      default:\n        return;\n    }\n  }, [format, navigate, currentDate]);\n\n  return (\n    <CalendarContainer>\n      <CalendarToolbar\n        currentDate={currentDate}\n        setCurrentDate={setCurrentDate}\n        format={format}\n        setFormat={setFormat}\n      />\n      <Outlet />\n    </CalendarContainer>\n  );\n};\n\nexport default CalendarPage;\n\n\nconst CalendarContainer = styled.div`\n  padding: 0 32px 32px;\n//   background-color: #f7f6f9;\n//   max-width: 1085px;\n  margin-top: 45px; \n      @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n        margin-top: 0;\n    }\n`;\n\n// import React, { useEffect } from 'react';\n// import styled from '@emotion/styled';\n// import CalendarToolbar from 'components/Calendar/CalendarToolbar/CalendarToolbar';\n// // import ChoosedMonth from 'components/Calendar/ChoosedMonth/ChoosedMonth';\n// // import ChoosedDay from 'components/Calendar/ChoosedDay/ChoosedDay';\n// import { useLocation, useNavigate, Outlet } from 'react-router-dom';\n\n// const CalendarPage = () => {\n//     // const { currentDay } = useParams();\n\n//     const location = useLocation();\n\n//     const navigate = useNavigate();\n\n//     useEffect(() => {\n//         // console.log(location);\n//         if (location.pathname === '/calendar') {\n//             navigate('/calendar/month/:currentDate');\n//             // navigate('/account');\n//         }\n//     });\n\n//     return (\n//         <CalendarContainer>\n//             <CalendarToolbar />\n//             {/* <ChoosedMonth />\n//             {currentDay ? <ChoosedDay /> : null} */}\n//             <Outlet />\n//         </CalendarContainer>\n//     );\n// };\n\n// const CalendarContainer = styled.div`\n//   padding: 0 32px 32px;\n// //   background-color: #f7f6f9;\n// //   max-width: 1085px;\n//   margin-top: 45px; \n//       @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n//         margin-top: 0;\n//     }\n// `;\n\n// export default CalendarPage;\n"],"names":["ToolbarContainer","styled","theme","breakpoints","m","PeriodTypeSelect","DateBox","Date","Icon","BtnLeft","BtnRight","PeriodPaginator","BtnMonth","BtnDay","TypeLink","NavLink","currentDate","setCurrentDate","format","setFormat","month","moment","day","handleChangePeriod","evt","currentTarget","textContent","localStorage","setItem","to","onClick","date","subtract","handlePrevDate","type","width","height","href","sprite","add","handleNextDate","navigate","useNavigate","useState","getItem","toString","useEffect","CalendarContainer"],"sourceRoot":""}