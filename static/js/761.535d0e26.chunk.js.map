{"version":3,"file":"static/js/761.535d0e26.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport * as yup from 'yup';\n\nimport { BsEyeFill } from 'react-icons/bs';\nimport { BsEyeSlashFill } from 'react-icons/bs';\n\nimport {\n    ContainerForm,\n    Title,\n    Span,\n    InputForm,\n    Button,\n    InputFormMargin0,\n    Error,\n    Label,\n    SvgStatus,\n    ErrorMes,\n} from '../RegisterForm/RegisterForm.styled';\n\nimport { Svg } from '../RegisterForm/RegisterForm.styled';\nimport { ButtonEye } from '../RegisterForm/RegisterForm.styled';\n\nimport sprite from '../../images/icons.svg';\n\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/authOperations';\n\nconst emailRegexp = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\nconst schema = yup.object().shape({\n    email: yup\n        .string()\n        .email()\n        .matches(emailRegexp, 'email invalid')\n        .required(),\n    password: yup.string().min(6).required(),\n});\n\nconst LoginForm = () => {\n    const dispatch = useDispatch();\n\n    const [icon, setIcon] = useState(<BsEyeFill />);\n    const [type, setType] = useState('password');\n\n    const handlerEyeClick = () => {\n        if (type === 'password') {\n            setType('text');\n            return setIcon(<BsEyeSlashFill />);\n        }\n        setIcon(<BsEyeFill />);\n        setType('password');\n    };\n\n    // console.log(user);\n\n    const initialValues = {\n        email: '',\n        password: '',\n    };\n\n    const handlerSubmit = (values, actions) => {\n        dispatch(login(values));\n        // console.log(values);\n        actions.resetForm();\n    };\n\n    return (\n        <ContainerForm>\n            <Formik\n                initialValues={initialValues}\n                validationSchema={schema}\n                onSubmit={handlerSubmit}\n            >\n                {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                    /* and other goodies */\n                }) => (\n                    <Form>\n                        <Title>Log In</Title>\n\n                        <div>\n                            <Label htmlFor=\"\">\n                                <Span>Email</Span>\n                                <InputForm\n                                    type=\"email\"\n                                    name=\"email\"\n                                    placeholder=\"nadiia@gmail.com\"\n                                    value={values.email}\n                                    errors={errors.email}\n                                    touched={touched.email?.toString()}\n                                    onBlur={handleBlur}\n                                    onChange={handleChange}\n                                />\n                                {/* <Error component=\"div\" name=\"email\" /> */}\n\n                                {touched.email &&\n                                    (errors.email ? (\n                                        <Error component=\"div\" name=\"email\" />\n                                    ) : (\n                                        <ErrorMes>\n                                            This is an CORRECT name\n                                        </ErrorMes>\n                                    ))}\n\n                                {touched.email && (\n                                    <SvgStatus\n                                        width=\"24\"\n                                        height=\"24\"\n                                        error={errors.email}\n                                    >\n                                        <use\n                                            href={`${sprite}${\n                                                errors.email\n                                                    ? '#error-outline'\n                                                    : '#done'\n                                            }`}\n                                        />\n                                    </SvgStatus>\n                                )}\n                            </Label>\n                        </div>\n\n                        <div>\n                            <Label htmlFor=\"\">\n                                <Span>Password</Span>\n                                <InputFormMargin0\n                                    type={type}\n                                    name=\"password\"\n                                    placeholder=\"*******\"\n                                    value={values.password}\n                                    errors={errors.password}\n                                    touched={touched.password?.toString()}\n                                    onBlur={handleBlur}\n                                    onChange={handleChange}\n                                />\n                                <ButtonEye onClick={handlerEyeClick}>\n                                    {icon}\n                                </ButtonEye>\n\n                                {/* <Error component=\"div\" name=\"password\" /> */}\n\n                                {touched.password &&\n                                    (errors.password ? (\n                                        <Error\n                                            component=\"div\"\n                                            name=\"password\"\n                                        />\n                                    ) : (\n                                        <ErrorMes>\n                                            This is an CORRECT name\n                                        </ErrorMes>\n                                    ))}\n\n                                {touched.password && (\n                                    <SvgStatus\n                                        width=\"24\"\n                                        height=\"24\"\n                                        error={errors.password}\n                                    >\n                                        <use\n                                            href={`${sprite}${\n                                                errors.password\n                                                    ? '#error-outline'\n                                                    : '#done'\n                                            }`}\n                                        />\n                                    </SvgStatus>\n                                )}\n                            </Label>\n                        </div>\n\n                        <Button type=\"submit\">\n                            Log In\n                            <Svg width=\"20\" height=\"20\">\n                                <use href={`${sprite}#log-in`} />\n                            </Svg>\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </ContainerForm>\n    );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport LoginForm from 'components/LoginForm/LoginForm';\n\nimport styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nimport login_goose_rocket_desktop from '../images/login_register/login_goose_rocket_desktop.png';\nimport login_goose_rocket_desktop2x from '../images/login_register/login_goose_rocket_desktop@2x.png';\n\nconst LoginPage = () => {\n    return (\n        <WrapperRegister>\n            <LoginForm />\n            <LinkToLogin to=\"/register\">Sign Up</LinkToLogin>\n            <Picture>\n                <source\n                    srcSet={\n                        (login_goose_rocket_desktop,\n                        login_goose_rocket_desktop2x)\n                    }\n                    media=\"(min-width: 1440px)\"\n                />\n                <img\n                    srcSet={\n                        (login_goose_rocket_desktop,\n                        login_goose_rocket_desktop2x)\n                    }\n                    width={368}\n                    height={521}\n                    alt=\"\"\n                />\n            </Picture>\n        </WrapperRegister>\n    );\n};\n\nconst WrapperRegister = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    background-color: #dcebf7;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n`;\n\nconst LinkToLogin = styled(NavLink)`\n    margin-top: 18px;\n    color: #3e85f3;\n    text-shadow: 0px 9.399999618530273px 57.6875px rgba(0, 0, 0, 0.04),\n        0px 47px 355px rgba(0, 0, 0, 0.07);\n    font-family: Inter;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 600;\n    line-height: 14px; \n    text-decoration-line: underline;\n\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n        margin-top: 24px;\n        font-size: 18px;\n        line-height: 24px;\n    }\n`;\n\nconst Picture = styled.picture`\n    display: none;\n\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.l}) {\n        display: block;\n        position: absolute;\n        top: 230px;\n        right: 60px;\n    }\n`;\n\nexport default LoginPage;\n"],"names":["schema","yup","shape","email","matches","required","password","min","dispatch","useDispatch","useState","icon","setIcon","type","setType","handlerEyeClick","initialValues","validationSchema","onSubmit","values","actions","login","resetForm","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","htmlFor","name","placeholder","value","toString","onBlur","onChange","component","width","height","error","href","sprite","onClick","WrapperRegister","styled","LinkToLogin","NavLink","theme","breakpoints","m","Picture","l","to","srcSet","login_goose_rocket_desktop2x","media","alt"],"sourceRoot":""}