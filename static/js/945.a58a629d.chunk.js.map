{"version":3,"file":"static/js/945.a58a629d.chunk.js","mappings":"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","sources":["components/StatisticsChart/ChartLegend/ChartLegend.styled.jsx","components/StatisticsChart/ChartLegend/StatDatePicker.styled.jsx","components/StatisticsChart/ChartLegend/StatDatePicker.jsx","components/StatisticsChart/ChartLegend/ChartLegend.jsx","helpers/formatPercent.js","components/StatisticsChart/StatisticsChart.jsx","helpers/calculateParams.js","helpers/getStatisticsCalculation.js","components/StatisticsChart/Chart/Chart.styled.jsx","components/StatisticsChart/Chart/Chart.jsx","pages/StatisticsPage.jsx","redux/calendar/calendarSelector.js"],"sourcesContent":["import styled from '@emotion/styled';\nexport const LegendBlock = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    padding-left: 0px;\n    margin: 0px 0px 40px 0px;\n    width: 307px;\n\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: center;\n        padding-left: 32px;\n        padding-right: 32px;\n        margin-bottom: 40px;\n        width: 640px;\n    }\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.l}) {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: center;\n        padding-left: 40px;\n        padding-right: 40px;\n        margin-bottom: 40px;\n\n        width: 860px;\n    }\n`;\n\nexport const Legend = styled.ul`\n    display: flex;\n    flex-direction: row;\n    color: ${({ theme }) => theme.colors.textPrimary};\n    font-family: Inter;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 18px;\n    gap: 20px;\n    font-size: 14px;\n    li:first-of-type::before {\n        content: '';\n        display: inline-block;\n        width: 8px;\n        height: 8px;\n        background-color: #ffd2dd;\n        border-radius: 50%;\n        margin-right: 8px;\n    }\n    li:last-of-type::before {\n        content: '';\n        display: inline-block;\n        width: 8px;\n        height: 8px;\n        background-color: #3e85f3;\n        border-radius: 50%;\n        margin-right: 8px;\n    }\n    @media screen and (min-width: 768px) {\n        font-size: 16px;\n    }\n    @media screen and (min-width: 1440px) {\n        font-size: 16px;\n    }\n`;\n\nexport const CalendarBlock = styled.div`\n    /* display: flex; */\n    /* gap: 50px; */\n`;\n","import styled from '@emotion/styled';\n\nexport const ToolbarContainer = styled.div`\n    margin-bottom: 24px;\n\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n        display: flex;\n        justify-content: space-between;\n    }\n`;\n\nexport const PeriodTypeSelect = styled.div`\n    display: flex;\n    justify-content: space-between;\n\n    @media screen and (min-width: 768px) {\n        display: flex;\n        justify-content: flex-start;\n        align-items: center;\n        gap: 8px;\n    }\n    @media screen and (min-width: 1440px) {\n        margin-right: 46px;\n    }\n`;\n\nexport const DateBox = styled.div`\n    background-color: #3e85f3;\n    width: 148px;\n    display: flex;\n    padding: 6px 10px;\n    justify-content: center;\n    align-items: center;\n    border-radius: 8px;\n`;\n\nexport const Date = styled.span`\n    text-transform: uppercase;\n    color: white;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: 18px;\n    @media screen and (min-width: 768px) {\n        font-size: 16px;\n    }\n    @media screen and (min-width: 1440px) {\n        font-size: 16px;\n    }\n`;\n\nexport const ToggleBox = styled.div`\n    display: flex;\n    background-color: #fff;\n    border: 1px solid rgba(220, 227, 229, 0.8);\n    border-radius: 8px;\n    gap: 1px;\n    overflow: hidden;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const ToggleBtn = styled.div`\n    padding: 7px 10px;\n    background-color: #fff;\n`;\n\nexport const Icon = styled.svg``;\n\nexport const BtnLeft = styled.button`\n    padding: 6px;\n    width: 36px;\n    height: 30px;\n    background-color: ${({ theme }) => theme.colors.backgroundSecondary};\n    border: ${({ theme }) => theme.borders.calendar};\n    border-radius: 8px 0 0 8px;\n    transition: ${({ theme }) =>\n        `stroke ${theme.animations.duration} ${theme.animations.cubicBezier}`};\n    stroke: ${({ theme }) => theme.colors.sliderMonthDay};\n    fill: none;\n    &:hover {\n        stroke: ${({ theme }) => theme.colors.sliderMonthDayHover};\n    }\n`;\n\nexport const BtnRight = styled.button`\n    padding: 6px 8px;\n    width: 36px;\n    height: 30px;\n    background-color: ${({ theme }) => theme.colors.backgroundSecondary};\n    border: ${({ theme }) => theme.borders.calendar};\n    border-radius: 0 8px 8px 0;\n    transition: ${({ theme }) =>\n        `stroke ${theme.animations.duration} ${theme.animations.cubicBezier}`};\n    stroke: ${({ theme }) => theme.colors.sliderMonthDay};\n    fill: none;\n    &:hover {\n        stroke: ${({ theme }) => theme.colors.sliderMonthDayHover};\n    }\n`;\n","import { forwardRef } from 'react';\nimport ReactDatePicker from 'react-datepicker';\nimport styled from '@emotion/styled';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport {\n    BtnLeft,\n    BtnRight,\n    Icon,\n    PeriodTypeSelect,\n} from './StatDatePicker.styled';\nimport sprite from 'images/icons.svg';\n\nconst StatDatePicker = ({ startDate, setStartDate }) => {\n    const ExampleCustomInput = forwardRef(({ value, onClick }, ref) => (\n        <CustomDatePicker\n            className=\"example-custom-input\"\n            onClick={onClick}\n            ref={ref}\n        >\n            {value}\n        </CustomDatePicker>\n    ));\n\n    const handleDateChange = date => {\n        setStartDate(date);\n    };\n    return (\n        <PeriodTypeSelect>\n            <DatePickerWrapp>\n                <ReactDatePicker\n                    selected={startDate}\n                    onChange={date => setStartDate(date)}\n                    customInput={<ExampleCustomInput />}\n                    dateFormat=\"dd MMMM yyyy\"\n                    formatWeekDay={nameOfDay => nameOfDay.charAt(0)}\n                />\n            </DatePickerWrapp>\n            <div>\n                <BtnLeft\n                    type=\"button\"\n                    aria-label=\"previous-date\"\n                    onClick={() =>\n                        handleDateChange(\n                            new Date(startDate.getTime() - 24 * 60 * 60 * 1000)\n                        )\n                    }\n                >\n                    <Icon width=\"18\" height=\"18\">\n                        <use href={`${sprite}#chevron-left`} />\n                    </Icon>\n                </BtnLeft>\n                <BtnRight\n                    type=\"button\"\n                    aria-label=\"next-date\"\n                    onClick={() =>\n                        handleDateChange(\n                            new Date(startDate.getTime() + 24 * 60 * 60 * 1000)\n                        )\n                    }\n                >\n                    <Icon width=\"18\" height=\"18\">\n                        <use href={`${sprite}#chevron-right`} />\n                    </Icon>\n                </BtnRight>\n            </div>\n        </PeriodTypeSelect>\n    );\n};\nexport default StatDatePicker;\n\nconst CustomDatePicker = styled.button`\n    width: 171px;\n    display: flex;\n    padding: 8px 12px;\n    justify-content: center;\n    align-items: center;\n    border: none;\n    border-radius: 8px;\n    background: #3e85f3;\n    color: #fff;\n    text-align: center;\n    font-family: Inter;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: 18px;\n    text-transform: uppercase;\n`;\nexport const DatePickerWrapp = styled.div`\n    .react-datepicker-wrapper {\n        display: block;\n    }\n    .react-datepicker {\n        position: absolute;\n        top: 8px;\n        left: 0px;\n        width: 235px;\n        height: 280px;\n        background-color: #3e85f3;\n        border-radius: 8px;\n        color: #fff;\n        overflow: hidden;\n        border: none;\n        display: flex;\n        justify-content: center;\n        font-size: 18px;\n        line-height: 1.3;\n\n        &__header {\n            background-color: #3e85f3;\n            color: #fff;\n            border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n        }\n        &__month-container {\n            background-color: #3e85f3;\n            width: 235px;\n            height: 280px;\n\n            /* padding: 0 15px 18px 15px ; */\n        }\n\n        &__current-month {\n            font-size: 24px;\n            text-align: center;\n            font-family: Inter;\n            font-weight: 600;\n            line-height: 1.666;\n        }\n        &__day-names {\n            margin: 0;\n        }\n\n        &__day {\n            color: #fff;\n            width: 26px;\n            height: 27px;\n            font-size: 14px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-family: Inter;\n            font-style: normal;\n            font-weight: 400;\n            line-height: 18px;\n            letter-spacing: -0.28px;\n            /* @media (min-width: 768px) {\n                font-size: 18px;\n            } */\n            &:hover {\n                border-radius: 50%;\n                background-color: #fff;\n                color: #3e85f3;\n                opacity: 0.7;\n            }\n            &--weekend {\n                /* opacity: 40%; */\n            }\n\n            &--selected {\n                border-radius: 50%;\n                opacity: 1;\n                outline: none;\n\n                padding: 12px 14px;\n                text-align: center;\n                background-color: white;\n                color: #3e85f3;\n            }\n            &--keyboard-selected {\n                border-radius: 50%;\n                opacity: 1;\n                outline: none;\n            }\n        }\n\n        &__navigation {\n            margin-top: 12px;\n        }\n        &__day-name {\n            color: rgba(255, 255, 255, 0.5);\n            font-family: Inter;\n            font-size: 14px;\n            font-style: normal;\n            font-weight: 500;\n            line-height: normal;\n            letter-spacing: -0.28px;\n            width: 26px;\n        }\n\n        &__day--outside-month {\n            color: rgba(255, 255, 255, 0.2);\n        }\n\n        &__current-month {\n            color: #fff;\n            font-family: Inter;\n            font-size: 16px;\n            font-style: normal;\n            font-weight: 600;\n            line-height: normal;\n            letter-spacing: -0.32px;\n            margin-top: 10px;\n            margin-bottom: 18px;\n        }\n\n        &__navigation--years {\n            background-color: #fff;\n            border-radius: 50%;\n            width: 15px;\n            height: 15px;\n            margin: 5px auto;\n            &:hover {\n                background-color: #3e85f3;\n                border: 1px solid #fff;\n            }\n        }\n        &__year-option {\n            background-color: #3e85f3;\n            color: #fff;\n            &:hover {\n                background-color: #3e85f3;\n                font-size: 14px;\n                font-weight: 700;\n            }\n        }\n        &__year-dropdown {\n            &::-webkit-scrollbar {\n                width: 15px;\n                height: 20px;\n                background: #3e85f3;\n                border-radius: 8px;\n            }\n            &::-webkit-scrollbar-thumb {\n                background: #fff;\n                border-radius: 8px;\n            }\n        }\n        &__week {\n            display: flex;\n        }\n        &__month {\n            margin: 0;\n            padding-left: 7px;\n            padding-top: 7px;\n        }\n    }\n`;\n","import { CalendarBlock, Legend, LegendBlock } from './ChartLegend.styled';\nimport StatDatePicker from './StatDatePicker';\n\nconst ChartLegend = ({ startDate, setStartDate }) => {\n    return (\n        <LegendBlock>\n            <CalendarBlock>\n                <StatDatePicker\n                    startDate={startDate}\n                    setStartDate={setStartDate}\n                />\n            </CalendarBlock>\n            <Legend>\n                <li>By Day</li>\n                <li>By Month</li>\n            </Legend>\n        </LegendBlock>\n    );\n};\nexport default ChartLegend;\n","export const formatPercent = value => {\n    const formattedValue = value.toFixed(0);\n    return isNaN(formattedValue) ? '0%' : `${formattedValue}%`;\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useThemeContext } from 'hooks/ThemeContext';\nimport moment from 'moment';\n\nimport { fetchTasks } from 'redux/calendar/calendarOperations';\nimport { selectTasks } from 'redux/calendar/calendarSelector';\nimport {\n    calculateParams,\n    formatPercent,\n    getStatisticsCalculation,\n} from 'helpers';\nimport {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    LabelList,\n} from 'recharts';\nimport { LIGHT } from 'constants';\n\nconst StatisticsChart = ({ startDate, setStartDate }) => {\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n    const { theme } = useThemeContext();\n    const dispatch = useDispatch();\n    const { barGap, chartWidth, chartHeight, marginRight, barSize, fontSize } =\n        calculateParams(windowWidth);\n    const isLightTheme = theme === LIGHT;\n    const currentDate = moment(startDate).format('YYYY-MM-DD');\n    const tasks = useSelector(selectTasks);\n\n    useEffect(() => {\n        dispatch(fetchTasks(currentDate));\n        const handleResize = () => {\n            const newWidth = window.innerWidth;\n            setWindowWidth(newWidth);\n        };\n        window.addEventListener('resize', handleResize);\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [currentDate, dispatch]);\n\n    const fillBarValue = isLightTheme ? '#343434' : '#fff';\n    const gridStroke = isLightTheme ? '#E3F3FF' : '#e3f3ff26';\n    const { formattedData } = getStatisticsCalculation(currentDate, tasks);\n\n    return (\n        <BarChart\n            width={chartWidth}\n            height={chartHeight}\n            data={formattedData}\n            margin={{\n                top: 18,\n                right: marginRight,\n                left: 0,\n                bottom: 0,\n            }}\n            barSize={barSize}\n            barRadius={10}\n            barGap={barGap}\n        >\n            <CartesianGrid\n                horizontal={true}\n                vertical={false}\n                stroke={gridStroke}\n            />\n            <defs>\n                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0\">\n                    <stop stopColor=\"#FFD2DD\" />\n                    <stop\n                        offset=\"96.87%\"\n                        stopColor=\"rgba(255, 210, 221, 0.00)\"\n                        stopOpacity={0}\n                    />\n                </linearGradient>\n                <linearGradient id=\"colorPv\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0\">\n                    <stop stopColor=\"#3E85F3\" />\n                    <stop\n                        offset=\"100%\"\n                        stopColor=\"rgba(62, 133, 243, 0.00)\"\n                        stopOpacity={0}\n                    />\n                </linearGradient>\n            </defs>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n\n            <XAxis dataKey=\"name\" hide=\"true\" />\n            <YAxis ticks={[0, 20, 40, 60, 80, 100]} hide=\"true\" width={25} />\n\n            <Bar dataKey=\"By Day\" fill=\"url(#colorUv)\" radius={[0, 0, 7, 7]}>\n                <LabelList\n                    dataKey=\"By Day\"\n                    position=\"top\"\n                    fontSize={fontSize}\n                    fill={fillBarValue}\n                    formatter={formatPercent}\n                />\n            </Bar>\n            <Bar dataKey=\"By Month\" fill=\"url(#colorPv)\" radius={[0, 0, 7, 7]}>\n                <LabelList\n                    dataKey=\"By Month\"\n                    position=\"top\"\n                    fontSize={fontSize}\n                    fill={isLightTheme ? '#343434' : '#fff'}\n                    formatter={formatPercent}\n                />\n            </Bar>\n        </BarChart>\n    );\n};\n\nexport default StatisticsChart;\n","export const calculateParams = width => {\n    let barGap, chartWidth, chartHeight, marginRight, barSize, fontSize;\n\n    if (width >= 1440) {\n        barGap = 14;\n        fontSize = 16;\n        chartWidth = 694;\n        chartHeight = 286;\n        marginRight = 0;\n        barSize = 27;\n    } else if (width >= 768) {\n        barGap = 14;\n        fontSize = 16;\n        chartWidth = 522;\n        chartHeight = 286;\n        marginRight = 0;\n        barSize = 27;\n    } else {\n        barGap = 8;\n        fontSize = 12;\n        chartWidth = 243;\n        chartHeight = 266;\n        marginRight = 0;\n        barSize = 22;\n    }\n\n    return { barGap, chartWidth, chartHeight, marginRight, barSize, fontSize };\n};\n","export const getStatisticsCalculation = (currentDate, tasks) => {\n    const parts = currentDate.split('-');\n    const currentMonth = parseInt(parts[1], 10);\n    const currentDay = parseInt(parts[2], 10);\n\n    const tasksForDay = tasks.filter(task => {\n        const taskDate = new Date(task.date);\n        const taskDay = taskDate.getDate();\n\n        const taskMonth = taskDate.getMonth() + 1;\n\n        return taskDay === currentDay && taskMonth === currentMonth;\n    });\n\n    const tasksForMonth = tasks.filter(task => {\n        const taskDate = new Date(task.date);\n        const taskMonth = taskDate.getMonth() + 1;\n\n        return taskMonth === currentMonth;\n    });\n\n    const todoByDay = tasksForDay.filter(\n        task => task.category === 'to-do'\n    ).length;\n    const inprogressByDay = tasksForDay.filter(\n        task => task.category === 'in-progress'\n    ).length;\n    const doneByDay = tasksForDay.filter(\n        task => task.category === 'done'\n    ).length;\n\n    const todoByMonth = tasksForMonth.filter(\n        task => task.category === 'to-do'\n    ).length;\n    const inprogressByMonth = tasksForMonth.filter(\n        task => task.category === 'in-progress'\n    ).length;\n    const doneByMonth = tasksForMonth.filter(\n        task => task.category === 'done'\n    ).length;\n    const totalTasksForDay = todoByDay + inprogressByDay + doneByDay;\n    const totalTasksForMonth = todoByMonth + inprogressByMonth + doneByMonth;\n\n    const formattedData = [\n        {\n            name: 'To Do',\n            'By Day':\n                totalTasksForDay > 0 ? (todoByDay / totalTasksForDay) * 100 : 0,\n            'By Month':\n                totalTasksForMonth > 0\n                    ? (todoByMonth / totalTasksForMonth) * 100\n                    : 0,\n        },\n        {\n            name: 'In Progress',\n            'By Day':\n                totalTasksForDay > 0\n                    ? (inprogressByDay / totalTasksForDay) * 100\n                    : 0,\n            'By Month':\n                totalTasksForMonth > 0\n                    ? (inprogressByMonth / totalTasksForMonth) * 100\n                    : 0,\n        },\n        {\n            name: 'Done',\n            'By Day':\n                totalTasksForDay > 0 ? (doneByDay / totalTasksForDay) * 100 : 0,\n            'By Month':\n                totalTasksForMonth > 0\n                    ? (doneByMonth / totalTasksForMonth) * 100\n                    : 0,\n        },\n    ];\n\n    return { formattedData };\n};\n","import styled from '@emotion/styled';\n\nexport const CharContainer = styled.div`\n    border: 0.8px solid;\n    border-color: ${({ theme }) => theme.colors.statisticsLine};\n    width: 307px;\n    height: 413px;\n    border-radius: 29px;\n    padding: 73px 14px 66px 14px;\n    color: #343434;\n    font-family: Inter;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 150%;\n    transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n        width: 640px;\n        height: 424px;\n        border-radius: 16px;\n        padding: 61px 32px 32px 32px;\n        color: #343434;\n        font-family: Inter;\n        font-size: 14px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: 150%;\n    }\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.l}) {\n        width: 860px;\n        height: 440px;\n        border-radius: 29px;\n        padding: 85px 40px 70px 40px;\n        color: #343434;\n        font-family: Inter;\n        font-size: 14px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: 150%;\n    }\n`;\n\nexport const StatBlock = styled.section`\n    display: flex;\n    margin-bottom: 10px;\n    @media screen and (min-width: 768px) {\n        margin-bottom: 8px;\n    }\n    @media screen and (min-width: 1440px) {\n        margin-bottom: 8px;\n    }\n`;\n\nexport const Yaxis = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-top: -37px;\n    margin-right: 0px;\n    padding-left: 0px;\n    font-weight: 600;\n    @media screen and (min-width: 768px) {\n        margin-top: -41px;\n        margin-right: 17px;\n    }\n    @media screen and (min-width: 1440px) {\n        margin-right: 46px;\n        margin-top: -40px;\n    }\n`;\nexport const YaxisName = styled.p`\n    margin-bottom: 20px;\n    color: ${({ theme }) => theme.colors.textPrimary};\n    @media screen and (min-width: 768px) {\n        margin-bottom: 24px;\n    }\n    @media screen and (min-width: 1440px) {\n        margin-bottom: 24px;\n    }\n`;\nexport const Yticks = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 29px;\n    font-weight: 400;\n    color: ${({ theme }) => theme.colors.textPrimary};\n    @media screen and (min-width: 768px) {\n        gap: 33px;\n    }\n    @media screen and (min-width: 1440px) {\n        gap: 33px;\n    }\n`;\n\nexport const Xaxis = styled.div``;\n\nexport const Xticks = styled.ul`\n    display: flex;\n    gap: 34px;\n    color: ${({ theme }) => theme.colors.textPrimary};\n    margin-left: 62px;\n    margin-bottom: -33px;\n    font-size: 12px;\n    @media screen and (min-width: 768px) {\n        display: flex;\n        gap: 120px;\n        margin-left: 122px;\n        margin-bottom: -33px;\n        font-size: 14px;\n    }\n    @media screen and (min-width: 1440px) {\n        display: flex;\n        gap: 176px;\n        margin-left: 180px;\n        margin-bottom: -33px;\n        font-size: 14px;\n    }\n`;\n","import StatisticsReChart from '../StatisticsChart';\nimport {\n    CharContainer,\n    StatBlock,\n    Xaxis,\n    Xticks,\n    Yaxis,\n    YaxisName,\n    Yticks,\n} from './Chart.styled';\n\nconst Chart = ({ startDate, setStartDate }) => {\n    return (\n        <CharContainer>\n            <StatBlock>\n                <Yaxis>\n                    <YaxisName>Tasks</YaxisName>\n                    <Yticks>\n                        <li>100</li>\n                        <li>80</li>\n                        <li>60</li>\n                        <li>40</li>\n                        <li>20</li>\n                        <li>0</li>\n                    </Yticks>\n                </Yaxis>\n                <StatisticsReChart\n                    startDate={startDate}\n                    setStartDate={setStartDate}\n                />\n            </StatBlock>\n            <Xaxis>\n                <Xticks>\n                    <li>To Do</li>\n                    <li>In Progress</li>\n                    <li>Done</li>\n                </Xticks>\n            </Xaxis>\n        </CharContainer>\n    );\n};\n\nexport default Chart;\n","import { useState } from 'react';\nimport { useThemeContext } from 'hooks/ThemeContext';\nimport { createGlobalStyle } from 'styled-components';\nimport styled from '@emotion/styled';\nimport ChartLegend from 'components/StatisticsChart/ChartLegend/ChartLegend';\nimport Chart from 'components/StatisticsChart/Chart/Chart';\n\nconst GlobalStyles = createGlobalStyle`\n    body {\n        background-color: ${({ theme }) => theme.colors.backgroundPrimary};\n        \n    }\n`;\n\nconst StatisticsPage = () => {\n    const [startDate, setStartDate] = useState(new Date());\n    const { theme } = useThemeContext();\n\n    return (\n        <>\n            <GlobalStyles theme={theme} />\n            <StatSectionStyled>\n                <ChartLegend\n                    startDate={startDate}\n                    setStartDate={setStartDate}\n                />\n                <Chart startDate={startDate} setStartDate={setStartDate} />\n            </StatSectionStyled>\n        </>\n    );\n};\n\nexport default StatisticsPage;\n\nconst StatSectionStyled = styled.section`\n    display: flex;\n    flex-direction: column;\n    background-color: ${({ theme }) => theme.colors.backgroundSecondary};\n    border-radius: 16px;\n\n    padding: 28px 14px 135px 14px;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n        padding: 132px 32px 224px 32px;\n    }\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.l}) {\n        padding: 134px 114px 104px 113px;\n    }\n`;\n","export const selectTasks = state => state.calendar.tasks;\n\nexport const selectError = state => state.calendar.error;\n\nexport const selectIsLoading = state => state.calendar.isLoading;\n\nexport const selectUserTask = state => state.calendar.userTask;\n"],"names":["LegendBlock","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","breakpoints","m","_ref2","l","Legend","_templateObject2","_ref3","colors","textPrimary","CalendarBlock","_templateObject3","PeriodTypeSelect","Icon","_templateObject4","_templateObject5","_templateObject6","_templateObject7","BtnLeft","_templateObject8","backgroundSecondary","borders","calendar","_ref4","concat","animations","duration","cubicBezier","_ref5","sliderMonthDay","_ref6","sliderMonthDayHover","BtnRight","_templateObject9","_ref7","_ref8","_ref9","_ref10","_ref11","startDate","setStartDate","ExampleCustomInput","forwardRef","ref","value","onClick","_jsx","CustomDatePicker","className","children","handleDateChange","date","_jsxs","DatePickerWrapp","ReactDatePicker","selected","onChange","customInput","dateFormat","formatWeekDay","nameOfDay","charAt","type","Date","getTime","width","height","href","sprite","StatDatePicker","formatPercent","formattedValue","toFixed","isNaN","_useState","useState","window","innerWidth","_useState2","_slicedToArray","windowWidth","setWindowWidth","useThemeContext","dispatch","useDispatch","_calculateParams","barGap","chartWidth","chartHeight","marginRight","barSize","fontSize","calculateParams","isLightTheme","LIGHT","currentDate","moment","format","tasks","useSelector","selectTasks","useEffect","fetchTasks","handleResize","newWidth","addEventListener","removeEventListener","fillBarValue","gridStroke","_getStatisticsCalcula","parts","split","currentMonth","parseInt","currentDay","tasksForDay","filter","task","taskDate","taskDay","getDate","taskMonth","getMonth","tasksForMonth","todoByDay","category","length","inprogressByDay","doneByDay","todoByMonth","inprogressByMonth","doneByMonth","totalTasksForDay","totalTasksForMonth","formattedData","name","getStatisticsCalculation","BarChart","data","margin","top","right","left","bottom","barRadius","CartesianGrid","horizontal","vertical","stroke","id","x1","y1","x2","y2","stopColor","offset","stopOpacity","strokeDasharray","XAxis","dataKey","hide","YAxis","ticks","Bar","fill","radius","LabelList","position","formatter","CharContainer","statisticsLine","StatBlock","Yaxis","YaxisName","Yticks","Xaxis","Xticks","StatisticsReChart","GlobalStyles","createGlobalStyle","backgroundPrimary","_Fragment","StatSectionStyled","ChartLegend","Chart","state"],"sourceRoot":""}