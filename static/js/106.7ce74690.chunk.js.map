{"version":3,"file":"static/js/106.7ce74690.chunk.js","mappings":"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","sources":["components/UserForm/UserForm.styled.jsx","redux/auth/authSelectors.js","components/UserForm/ReactDatePickerCalendar.styled.jsx","components/UserForm/UserForm.jsx","pages/AccountPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form } from 'formik';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const MainContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin: 0 auto;\n    max-width: 299px;\n    padding-top: 59px;\n    padding-left: 18px;\n    padding-right: 18px;\n    padding-bottom: 40px;\n    border-radius: 16px;\n    background-color: #fff;\n    @media (min-width: 768px) {\n        max-width: 704px;\n    }\n    @media (min-width: 1140px) {\n        max-width: 1087px;\n    }\n`;\n\nexport const AvatarContainer = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 40px;\n    margin-left: auto;\n    margin-right: auto;\n`;\nexport const ImgContainer = styled.div`\n    margin-bottom: 18px;\n    width: 72px;\n    height: 76px;\n    @media (min-width: 768px) {\n        width: 124px;\n        height: 130px;\n        margin-bottom: 20px;\n    }\n`;\n\nexport const ImgAvatar = styled.img`\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n\n    object-fit: cover;\n    object-position: 50% 50%;\n    margin-bottom: 18px;\n`;\n\nexport const InputFile = styled.input`\n    position: absolute;\n    top: 39px;\n    left: 32px;\n    width: 50px;\n    opacity: 0;\n    z-index: 2;\n    @media (min-width: 768px) {\n        top: 114px;\n        left: 62px;\n    }\n`;\n\nexport const SvgPlus = styled.svg`\n    stroke: white;\n    fill: #3e85f3;\n    position: absolute;\n    top: 60px;\n    left: 48px;\n    cursor: pointer;\n    @media (min-width: 768px) {\n        top: 112px;\n        left: 84px;\n        width: 24px;\n        height: 24px;\n    }\n`;\n\nexport const UserName = styled.h2`\n    color: #343434;\n    font-family: Inter;\n    font-size: 14px;\n    font-weight: 700;\n    line-height: 1.285;\n    @media (min-width: 768px) {\n        margin-bottom: 8px;\n        font-size: 18px;\n    }\n`;\n\nexport const UserP = styled.p`\n    color: #343434;\n    font-size: 12px;\n    font-weight: 600;\n    font-family: Inter;\n    line-height: 1.1666;\n    @media (min-width: 768px) {\n        font-size: 14px;\n    }\n`;\n\nexport const StyledForm = styled(Form)`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    margin: 0 auto;\n    @media (min-width: 768px) {\n        max-width: 354px;\n        margin: 0 auto;\n    }\n    @media (min-width: 1140px) {\n        max-width: 758px;\n    }\n`;\n\nexport const FieldsWrap = styled.div`\n    width: 100%;\n    @media (min-width: 1140px) {\n        max-width: 758px;\n        display: grid;\n        grid-template: repeat(3, 1fr) / repeat(2, 1fr);\n        justify-content: center;\n        gap: 18px 50px;\n    }\n`;\n// export const Wrapper = styled.div`\n//     width: 299px;\n//     @media (min-width: 768px) {\n//         max-width: 354px;\n//     }\n//     @media (min-width: 1140px) {\n//     }\n// `;\n\nexport const Label = styled.label`\n    position: relative;\n`;\n\nexport const Span = styled.span`\n    display: block;\n    color: #111;\n    font-family: Inter;\n    font-size: 12px;\n    line-height: 1.166;\n    margin-bottom: 8px;\n    @media (min-width: 768px) {\n        font-size: 14px;\n    }\n    line-height: 1.285;\n`;\n\nexport const LabelWrap = styled.div`\n    width: 100%;\n    margin-bottom: 18px;\n    @media (min-width: 768px) {\n        margin-bottom: 24px;\n    }\n    @media (min-width: 1140px) {\n        width: 354px;\n    }\n`;\n\nexport const InputForm = styled(Field)`\n    width: 100%;\n    padding: 12px;\n    border-radius: 8px;\n    border: 1px solid rgba(220, 227, 229, 0.6);\n\n    outline: none;\n    font-family: Inter;\n\n    line-height: 1.28;\n\n    &:hover,\n    &:focus {\n        border: 1px solid #111;\n    }\n\n    ::placeholder {\n        color: #111;\n        font-weight: 600;\n        font-size: 14px;\n    }\n\n    &.input-error {\n        border: 1px solid #e74a3b;\n    }\n\n    &.input-valid {\n        border: 1px solid #3cbc81;\n    }\n    @media (min-width: 768px) {\n        padding: 14px;\n        ::placeholder {\n            color: #111;\n            font-weight: 600;\n            font-size: 16px;\n        }\n    }\n`;\n\nexport const IconDone = styled.svg`\n    position: absolute;\n    top: 35px;\n    right: 18px;\n    fill: #3cbc81;\n`;\n\nexport const IconErr = styled.svg`\n    position: absolute;\n    top: 35px;\n    right: 18px;\n    fill: #e74a3b;\n`;\nexport const Button = styled.button`\n    margin-top: 30px;\n    /* width: 195px; */\n    padding: 14px 50px;\n    align-self: center;\n    border: none;\n    outline: none;\n\n    border-radius: 16px;\n    background: #3e85f3;\n    box-shadow: 4px 2px 16px 0px rgba(136, 165, 191, 0.48);\n\n    color: #fff;\n    font-family: Inter;\n    font-size: 14px;\n    font-weight: 600;\n    line-height: 1.333;\n    letter-spacing: -0.36px;\n    @media (min-width: 768px) {\n        padding: 15px 84px;\n    }\n`;\n\nexport const Error = styled(ErrorMessage)`\n    position: absolute;\n    bottom: -28px;\n    left: 0;\n\n    color: #da1414;\n    font-family: Inter;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 14px;\n    @media (min-width: 768px) {\n        bottom: -33px;\n        left: 6px;\n    }\n`;\n","export const selectUser = state => state.auth.user;","import DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport styled from '@emotion/styled';\n\n\nexport const DatePickerStyled = styled(DatePicker)`\n    width: 100%;\n    padding: 12px;\n    border-radius: 8px;\n    border: 1px solid rgba(220, 227, 229, 0.6);\n\n    outline: none;\n    font-family: Inter;\n\n    line-height: 1.28;\n\n    &:hover,\n    &:focus {\n        border: 1px solid #111;\n    }\n\n    ::placeholder {\n        color: #111;\n        font-weight: 600;\n        font-size: 14px;\n    }\n    @media (min-width: 768px) {\n        padding: 14px;\n        ::placeholder {\n            color: #111;\n            font-weight: 600;\n            font-size: 16px;\n        }\n    }\n`;\nexport const DatePickWrapper = styled.div`\n    .react-datepicker-wrapper {\n        display: block;\n    }\n    .react-datepicker {\n        position: absolute;\n        top: 34px;\n        left: 27px;\n\n        @media (min-width: 768px) {\n            top: -60px;\n            left: 110px;\n        }\n        background-color: #3e85f3;\n        border-radius: 16px;\n        color: #fff;\n        overflow: hidden;\n        border: none;\n        width: 327px;\n        height: 318px;\n        display: flex;\n        justify-content: center;\n        font-size: 18px;\n        line-height: 1.3;\n\n        @media (min-width: 768px) {\n            width: 373px;\n            height: 354px;\n            font-size: 22px;\n            line-height: 1.3;\n        }\n\n        &__header {\n            background-color: #3e85f3;\n            color: #fff;\n            border-bottom:1px solid rgba(255, 255, 255, 0.20);\n        }\n        &__month-container {\n            background-color: #3e85f3;\n        }\n\n        &__current-month {\n            font-size: 24px;\n            text-align: center;\n            font-family: Inter;\n            font-weight: 600;\n            line-height: 1.666;\n        }\n        &__day {\n            color: #fff;\n            width: 40px;\n            height: 40px;\n            font-size: 14px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            @media (min-width: 768px) {\n                font-size: 18px;\n            }\n            &:hover {\n                border-radius: 50%;\n                background-color: #fff;\n                color: #3e85f3;\n                opacity: 0.7;\n            }\n            &--weekend {\n                opacity: 40%;\n            }\n\n            &--selected {\n                border-radius: 50%;\n                opacity: 1;\n                outline: none;\n\n                padding: 12px 15px;\n                text-align: center;\n                background-color: white;\n                color: #3e85f3;\n            }\n            &--keyboard-selected {\n                border-radius: 50%;\n                opacity: 1;\n                outline: none;\n            }\n        }\n        &__day-name {\n            color: #fff;\n            width: 40px;\n        }\n        &__current-month {\n            color: #fff;\n        }\n\n        &__navigation--years {\n            background-color: #fff;\n            border-radius: 50%;\n            width: 15px;\n            height: 15px;\n            margin: 5px auto;\n            &:hover {\n                background-color: #3e85f3;\n                border: 1px solid #fff;\n            }\n        }\n        &__year-option {\n            background-color: #3e85f3;\n            color: #fff;\n            &:hover {\n                background-color: #3e85f3;\n                font-size: 14px;\n                font-weight: 700;\n            }\n        }\n        &__year-dropdown {\n            &::-webkit-scrollbar {\n                width: 15px;\n                height: 20px;\n                background: #3e85f3;\n                border-radius: 8px;\n            }\n            &::-webkit-scrollbar-thumb {\n                background: #fff;\n                border-radius: 8px;\n            }\n        }\n        &__week {\n            \n            display: flex;\n        };\n        &__month{\n            margin:0;\n            padding-bottom:9px;\n        }\n    }\n`;\n","import React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport sprite from '../../images/icons.svg';\n\nimport {\n    AvatarContainer,\n    Button,\n    Error,\n    IconDone,\n    IconErr,\n    ImgAvatar,\n    InputFile,\n    InputForm,\n    Label,\n    LabelWrap,\n    MainContainer,\n    Span,\n    StyledForm,\n    SvgPlus,\n    UserName,\n    UserP,\n} from './UserForm.styled';\nimport { ImgContainer } from './UserForm.styled';\nimport { FieldsWrap } from './UserForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectUser } from 'redux/auth/authSelectors';\nimport {\n    DatePickWrapper,\n    DatePickerStyled,\n} from './ReactDatePickerCalendar.styled';\nimport moment from 'moment/moment';\nimport { editUser } from 'redux/auth/authOperations';\n\nconst dayMoment = moment().format('DD/MM/YYYY');\nconst emailRegexp = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\nconst phoneRegexp = /^\\+380\\d{9}$/;\n\nconst schema = yup.object().shape({\n    name: yup.string().max(16).required(),\n    email: yup\n        .string()\n        .email()\n        .matches(emailRegexp, 'email invalid')\n        .required(),\n    birthday: yup.date().max(dayMoment, 'Birthday must be earlier than today'),\n    phone: yup.string().matches(phoneRegexp),\n    skype: yup.string().max(16),\n});\n\nfunction handleInput(errors, touched, fieldName) {\n    if (errors[fieldName] && touched[fieldName]) {\n        return (\n            <IconErr width={24} height={24}>\n                <use href={`${sprite}#error-outline`} />\n            </IconErr>\n        );\n    } else if (touched[fieldName]) {\n        return (\n            <IconDone width={24} height={24}>\n                <use href={`${sprite}#done`} />\n            </IconDone>\n        );\n    }\n}\n\nexport const UserForm = () => {\n    const [currentAvatar, setCurrentAvatar] = useState(null);\n    const [currentBirthday, setCurrentBirthday] = useState(new Date());\n\n    const dispatch = useDispatch();\n\n    const user = useSelector(selectUser);\n    // console.log(user);\n\n    const initialValues = {\n        name: user.name || '',\n        email: user.email || '',\n        phone: user.phone || '',\n        skype: user.skype || '',\n    };\n\n    const handleChange = e => {\n        setCurrentAvatar(e.target.files[0]);\n        console.log(currentAvatar);\n    };\n\n    const handleSubmit = (values, actions) => {\n        const newData = {\n            ...values,\n            birthday: currentBirthday,\n        };\n\n        dispatch(editUser(newData));\n\n        actions.resetForm();\n    };\n\n    return (\n        <MainContainer>\n            <AvatarContainer>\n                <ImgContainer>\n                    <ImgAvatar src={user.avatarURL} alt=\"avatar\" />\n                </ImgContainer>\n                <InputFile\n                    type=\"file\"\n                    onChange={handleChange}\n                    name=\"avatar\"\n                    accept=\"image/png, image/jpeg, image/jpg\"\n                />\n                <SvgPlus width=\"14\" height=\"14\">\n                    <use href={`${sprite}#icon-image`} />\n                </SvgPlus>\n                <UserName>{user.name || 'User Name'}</UserName>\n                <UserP>User</UserP>\n            </AvatarContainer>\n            <Formik\n                initialValues={initialValues}\n                validationSchema={schema}\n                onSubmit={handleSubmit}\n            >\n                {({ errors, touched, values, handleChange }) => {\n                    return (\n                        <StyledForm>\n                            <FieldsWrap>\n                                <LabelWrap>\n                                    <Label htmlFor=\"\">\n                                        <Span>User name</Span>\n                                        <InputForm\n                                            type=\"text\"\n                                            name=\"name\"\n                                            placeholder=\"Enter your name\"\n                                            onChange={handleChange}\n                                            value={values.name}\n                                            className={\n                                                errors.name && touched.name\n                                                    ? 'input-error'\n                                                    : touched.name\n                                                    ? 'input-valid'\n                                                    : ''\n                                            }\n                                        />\n                                        <Error component=\"div\" name=\"name\" />\n                                        {handleInput(errors, touched, 'name')}\n                                    </Label>\n                                </LabelWrap>\n                                <LabelWrap>\n                                    <Label htmlFor=\"\">\n                                        <Span> Birthday</Span>\n                                        <DatePickWrapper>\n                                            <DatePickerStyled\n                                                selected={currentBirthday}\n                                                onChange={date =>\n                                                    setCurrentBirthday(date)\n                                                }\n                                                formatWeekDay={nameOfDay =>\n                                                    nameOfDay.charAt(0)\n                                                }\n                                                name=\"birthday\"\n                                                maxDate={new Date()}\n                                                className={\n                                                    errors.birthday\n                                                        ? 'input-error'\n                                                        : ''\n                                                }\n                                                showYearDropdown\n                                                value={user.birthday}\n                                            />\n                                        </DatePickWrapper>\n                                        <Error\n                                            component=\"div\"\n                                            name=\"birthday\"\n                                        />\n                                        {handleInput(\n                                            errors,\n                                            touched,\n                                            'birthday'\n                                        )}\n                                    </Label>\n                                </LabelWrap>\n\n                                <LabelWrap>\n                                    <Label htmlFor=\"\">\n                                        <Span>Email</Span>\n                                        <InputForm\n                                            type=\"email\"\n                                            name=\"email\"\n                                            placeholder=\"Enter your email\"\n                                            // onChange={handleChange}\n                                            value={values.email}\n                                            className={\n                                                errors.email && touched.email\n                                                    ? 'input-error'\n                                                    : touched.email\n                                                    ? 'input-valid'\n                                                    : ''\n                                            }\n                                        />\n                                        <Error component=\"div\" name=\"email\" />\n                                        {handleInput(errors, touched, 'email')}\n                                    </Label>\n                                </LabelWrap>\n                                <LabelWrap>\n                                    <Label htmlFor=\"\">\n                                        <Span>Phone</Span>\n                                        <InputForm\n                                            type=\"tel\"\n                                            name=\"phone\"\n                                            placeholder=\"Enter your phone number\"\n                                            // onChange={handleChange}\n                                            value={values.phone}\n                                            className={[\n                                                errors.phone && touched.phone\n                                                    ? 'input-error'\n                                                    : touched.phone\n                                                    ? 'input-valid'\n                                                    : '',\n                                            ]}\n                                        />\n                                        <Error component=\"div\" name=\"phone\" />\n                                        {handleInput(errors, touched, 'phone')}\n                                    </Label>\n                                </LabelWrap>\n                                <LabelWrap>\n                                    <Label htmlFor=\"\">\n                                        <Span>Skype</Span>\n                                        <InputForm\n                                            type=\"text\"\n                                            name=\"skype\"\n                                            placeholder=\"Add your skype number\"\n                                            value={values.skype}\n                                            // onChange={handleChange}\n                                            className={\n                                                errors.skype && touched.skype\n                                                    ? 'input-error'\n                                                    : touched.skype\n                                                    ? 'input-valid'\n                                                    : ''\n                                            }\n                                        />\n                                        <Error component=\"div\" name=\"skype\" />\n                                        {handleInput(errors, touched, 'skype')}\n                                    </Label>\n                                </LabelWrap>\n                            </FieldsWrap>\n\n                            <Button type=\"submit\">Save changes</Button>\n                        </StyledForm>\n                    );\n                }}\n            </Formik>\n        </MainContainer>\n    );\n};\n","import { UserForm } from 'components/UserForm/UserForm';\n\nconst AccountPage = () => {\n    return <UserForm />;\n};\n\nexport default AccountPage;\n"],"names":["MainContainer","styled","AvatarContainer","ImgContainer","ImgAvatar","InputFile","SvgPlus","UserName","UserP","StyledForm","Form","FieldsWrap","Label","Span","LabelWrap","InputForm","Field","IconDone","IconErr","Button","Error","ErrorMessage","selectUser","state","auth","user","DatePickerStyled","DatePicker","DatePickWrapper","dayMoment","moment","format","schema","yup","shape","name","max","required","email","matches","birthday","phone","skype","handleInput","errors","touched","fieldName","width","height","href","sprite","UserForm","useState","currentAvatar","setCurrentAvatar","Date","currentBirthday","setCurrentBirthday","dispatch","useDispatch","useSelector","initialValues","src","avatarURL","alt","type","onChange","e","target","files","console","log","accept","validationSchema","onSubmit","values","actions","newData","editUser","resetForm","handleChange","htmlFor","placeholder","value","className","component","selected","date","formatWeekDay","nameOfDay","charAt","maxDate","showYearDropdown"],"sourceRoot":""}