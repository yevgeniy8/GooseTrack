{"version":3,"file":"static/js/308.c99567be.chunk.js","mappings":"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","sources":["components/StatisticsChart/StatisticsChart.jsx","helpers/getStatisticsCalculation.js","components/StatisticsChart/DatePicker.styled.jsx","components/StatisticsChart/TempDatePicker.jsx","pages/StatisticsPage.jsx","redux/calendar/calendarSelector.js"],"sourcesContent":["// import { faker } from '@faker-js/faker';\nimport { LIGHT } from 'constants';\n// import { getCurrentDate } from 'helpers';\nimport { useThemeContext } from 'hooks/ThemeContext';\nimport { getStatisticsCalculation } from 'helpers';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    LabelList,\n} from 'recharts';\nimport { fetchTasks } from 'redux/calendar/calendarOperations';\nimport { selectTasks } from 'redux/calendar/calendarSelector';\nimport moment from 'moment';\n\n// const data = [{ name: 'To Do' }, { name: 'In Progress' }, { name: 'Done' }];\n// const newData = data.map(el => ({\n//     ...el,\n//     'By Day': faker.number.int({ min: 10, max: 100 }),\n//     'By Month': faker.number.int({ min: 10, max: 100 }),\n// }));\n\nconst formatPercent = value => {\n    const formattedValue = value.toFixed(1);\n    return isNaN(formattedValue) ? '0%' : `${formattedValue}%`;\n};\n\n// const formatStartDate = date => {\n//     const year = date.getFullYear();\n//     const month = String(date.getMonth() + 1).padStart(2, '0');\n//     const day = String(date.getDate()).padStart(2, '0');\n//     return `${year}-${month}-${day}`;\n// };\n\nconst calculateParams = width => {\n    let barGap, chartWidth, chartHeight, marginRight, barSize, fontSize;\n\n    if (width >= 1440) {\n        barGap = 14;\n        fontSize = 16;\n        chartWidth = 694;\n        chartHeight = 286;\n        marginRight = 0;\n        barSize = 27;\n    } else if (width >= 768) {\n        barGap = 14;\n        fontSize = 16;\n        chartWidth = 522;\n        chartHeight = 286;\n        marginRight = 0;\n        barSize = 27;\n    } else {\n        barGap = 8;\n        fontSize = 12;\n        chartWidth = 243;\n        chartHeight = 266;\n        marginRight = 0;\n        barSize = 22;\n    }\n\n    return { barGap, chartWidth, chartHeight, marginRight, barSize, fontSize };\n};\n\nconst StatisticsReChart = ({ startDate, setStartDate }) => {\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n    const { barGap, chartWidth, chartHeight, marginRight, barSize, fontSize } =\n        calculateParams(windowWidth);\n    const { theme } = useThemeContext();\n    const isLightTheme = theme === LIGHT;\n\n    const currentDate = moment(startDate).format('YYYY-MM-DD');\n\n    console.log(startDate);\n\n    ///////////////////////////////////\n\n    //////////////////////////////////////////\n    // const { currentDate } = useParams();\n    // const date = new Date(currentDate);\n    const dispatch = useDispatch();\n    const tasks = useSelector(selectTasks);\n    // console.log(tasks);\n    // console.log('tasks:>>', tasks);\n    // console.log('currentDate', currentDate);\n\n    useEffect(() => {\n        dispatch(fetchTasks(currentDate));\n        const handleResize = () => {\n            const newWidth = window.innerWidth;\n            setWindowWidth(newWidth);\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [currentDate, dispatch]);\n\n    const fill = isLightTheme ? '#343434' : '#fff';\n    const gridStroke = isLightTheme ? '#E3F3FF' : '#e3f3ff26';\n\n    const { formattedData } = getStatisticsCalculation(currentDate, tasks);\n\n    console.log(formattedData);\n\n    return (\n        <BarChart\n            width={chartWidth}\n            height={chartHeight}\n            data={formattedData}\n            margin={{\n                top: 15,\n                right: marginRight,\n                left: 0,\n                bottom: 0,\n            }}\n            barSize={barSize}\n            barRadius={10}\n            barGap={barGap}\n        >\n            <CartesianGrid\n                horizontal={true}\n                vertical={false}\n                stroke={gridStroke}\n            />\n            <defs>\n                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0\">\n                    <stop stopColor=\"#FFD2DD\" />\n                    <stop\n                        offset=\"96.87%\"\n                        stopColor=\"rgba(255, 210, 221, 0.00)\"\n                        stopOpacity={0}\n                    />\n                </linearGradient>\n                <linearGradient id=\"colorPv\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0\">\n                    <stop stopColor=\"#3E85F3\" />\n                    <stop\n                        offset=\"100%\"\n                        stopColor=\"rgba(62, 133, 243, 0.00)\"\n                        stopOpacity={0}\n                    />\n                </linearGradient>\n            </defs>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n\n            <XAxis dataKey=\"name\" hide=\"true\" />\n            <YAxis ticks={[0, 20, 40, 60, 80, 100]} hide=\"true\" width={25} />\n\n            <Bar dataKey=\"By Day\" fill=\"url(#colorUv)\" radius={[0, 0, 7, 7]}>\n                <LabelList\n                    dataKey=\"By Day\"\n                    position=\"top\"\n                    fontSize={fontSize}\n                    fill={fill}\n                    formatter={formatPercent}\n                />\n            </Bar>\n            <Bar dataKey=\"By Month\" fill=\"url(#colorPv)\" radius={[0, 0, 7, 7]}>\n                <LabelList\n                    dataKey=\"By Month\"\n                    position=\"top\"\n                    fontSize={fontSize}\n                    fill={isLightTheme ? '#343434' : '#fff'}\n                    formatter={formatPercent}\n                />\n            </Bar>\n        </BarChart>\n    );\n};\n\nexport default StatisticsReChart;\n","export const getStatisticsCalculation = (currentDate, tasks) => {\n    const parts = currentDate.split('-');\n    const currentMonth = parseInt(parts[1], 10);\n    const currentDay = parseInt(parts[2], 10);\n\n    const tasksForDay = tasks.filter(task => {\n        const taskDate = new Date(task.date);\n        const taskDay = taskDate.getDate();\n\n        const taskMonth = taskDate.getMonth() + 1;\n\n        return taskDay === currentDay && taskMonth === currentMonth;\n    });\n\n    const tasksForMonth = tasks.filter(task => {\n        const taskDate = new Date(task.date);\n        const taskMonth = taskDate.getMonth() + 1;\n\n        return taskMonth === currentMonth;\n    });\n\n    const todoByDay = tasksForDay.filter(\n        task => task.category === 'to-do'\n    ).length;\n    const inprogressByDay = tasksForDay.filter(\n        task => task.category === 'in-progress'\n    ).length;\n    const doneByDay = tasksForDay.filter(\n        task => task.category === 'done'\n    ).length;\n\n    const todoByMonth = tasksForMonth.filter(\n        task => task.category === 'to-do'\n    ).length;\n    const inprogressByMonth = tasksForMonth.filter(\n        task => task.category === 'in-progress'\n    ).length;\n    const doneByMonth = tasksForMonth.filter(\n        task => task.category === 'done'\n    ).length;\n    const totalTasksForDay = todoByDay + inprogressByDay + doneByDay;\n    const totalTasksForMonth = todoByMonth + inprogressByMonth + doneByMonth;\n\n    const formattedData = [\n        {\n            name: 'To Do',\n            'By Day':\n                totalTasksForDay > 0 ? (todoByDay / totalTasksForDay) * 100 : 0,\n            'By Month':\n                totalTasksForMonth > 0\n                    ? (todoByMonth / totalTasksForMonth) * 100\n                    : 0,\n        },\n        {\n            name: 'In Progress',\n            'By Day':\n                totalTasksForDay > 0\n                    ? (inprogressByDay / totalTasksForDay) * 100\n                    : 0,\n            'By Month':\n                totalTasksForMonth > 0\n                    ? (inprogressByMonth / totalTasksForMonth) * 100\n                    : 0,\n        },\n        {\n            name: 'Done',\n            'By Day':\n                totalTasksForDay > 0 ? (doneByDay / totalTasksForDay) * 100 : 0,\n            'By Month':\n                totalTasksForMonth > 0\n                    ? (doneByMonth / totalTasksForMonth) * 100\n                    : 0,\n        },\n    ];\n\n    return { formattedData };\n};\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const ToolbarContainer = styled.div`\n    margin-bottom: 24px;\n\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n        display: flex;\n        justify-content: space-between;\n    }\n`;\n\nexport const PeriodTypeSelect = styled.div`\n    display: flex;\n    justify-content: space-between;\n    /* margin-bottom: 18px; */\n    /* gap: 8px; */\n    @media screen and (min-width: 768px) {\n        display: flex;\n        justify-content: flex-start;\n        align-items: center;\n        gap: 8px;\n    }\n    @media screen and (min-width: 1440px) {\n        margin-right: 46px;\n    }\n`;\n\nexport const DateBox = styled.div`\n    background-color: #3e85f3;\n    width: 148px;\n    display: flex;\n    padding: 6px 10px;\n    justify-content: center;\n    align-items: center;\n    border-radius: 8px;\n`;\n\nexport const Date = styled.span`\n    text-transform: uppercase;\n    color: white;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: 18px;\n    @media screen and (min-width: 768px) {\n        font-size: 16px;\n    }\n    @media screen and (min-width: 1440px) {\n        font-size: 16px;\n    }\n`;\n\nexport const ToggleBox = styled.div`\n    display: flex;\n    background-color: #fff;\n    border: 1px solid rgba(220, 227, 229, 0.8);\n    border-radius: 8px;\n    gap: 1px;\n    overflow: hidden;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const ToggleBtn = styled.div`\n    padding: 7px 10px;\n    background-color: #fff;\n`;\n\nexport const Icon = styled.svg`\n    stroke: #dce3e5;\n    &:hover {\n        stroke: ${({ theme }) => theme.colors.nameDay};\n    }\n`;\n\nexport const BtnLeft = styled.button`\n    padding: 8px 10px;\n    width: 38px;\n    height: 34px;\n    background-color: ${({ theme }) => theme.colors.backgroundSecondary};\n    border: solid 1px rgba(220, 227, 229, 0.8);\n    border-radius: 8px 0 0 8px;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    fill: none;\n    &:hover {\n        stroke: ${({ theme }) => theme.colors.nameDay};\n    }\n`;\n\nexport const BtnRight = styled.button`\n    padding: 8px 10px;\n    width: 38px;\n    height: 34px;\n    background-color: ${({ theme }) => theme.colors.backgroundSecondary};\n    border: solid 1px rgba(220, 227, 229, 0.8);\n    border-radius: 0 8px 8px 0;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    fill: none;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover {\n        stroke: ${({ theme }) => theme.colors.textPrimary};\n    }\n`;\n\nexport const PeriodPaginator = styled.div`\n    display: flex;\n    border-radius: 8px;\n    overflow: hidden;\n    height: 34px;\n`;\n\nexport const Period = styled.div`\n    width: 76px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 8px 0;\n    background-color: rgba(62, 133, 243, 0.2);\n`;\n\nexport const BtnMonth = styled.button`\n    width: 82px;\n    height: 34px;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 8px 0 0 8px;\n    border-right: 1px solid rgba(62, 133, 243, 0.2);\n    background-color: #e3f3ff;\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 500;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: center;\n    color: #3e85f3;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus,\n    &.active {\n        background-color: rgba(62, 133, 243, 0.2);\n    }\n`;\n\nexport const BtnDay = styled.button`\n    width: 82px;\n    height: 34px;\n    padding: 8px 16px;\n    border: none;\n    border-radius: 0 8px 8px 0;\n    border-left: 1px solid rgba(62, 133, 243, 0.2);\n    background-color: #e3f3ff;\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 500;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: center;\n    color: #3e85f3;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus,\n    &.active {\n        background-color: rgba(62, 133, 243, 0.2);\n    }\n`;\n\nexport const TypeLink = styled(NavLink)`\n    text-decoration: none;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 18px;\n    color: #3e85f3;\n`;\n","import { forwardRef } from 'react';\nimport ReactDatePicker from 'react-datepicker';\nimport styled from '@emotion/styled';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { BtnLeft, BtnRight, Icon, PeriodTypeSelect } from './DatePicker.styled';\nimport sprite from 'images/icons.svg';\n\nconst TempDatePicker = ({ startDate, setStartDate }) => {\n    // const [startDate, setStartDate] = useState(new Date());\n    const ExampleCustomInput = forwardRef(({ value, onClick }, ref) => (\n        <CustomDatePicker\n            className=\"example-custom-input\"\n            onClick={onClick}\n            ref={ref}\n        >\n            {value}\n        </CustomDatePicker>\n    ));\n\n    const handleDateChange = date => {\n        setStartDate(date);\n    };\n    return (\n        <PeriodTypeSelect>\n            <DatePickerWrapp>\n                <ReactDatePicker\n                    selected={startDate}\n                    onChange={date => setStartDate(date)}\n                    customInput={<ExampleCustomInput />}\n                    dateFormat=\"dd MMMM yyyy\"\n                />\n            </DatePickerWrapp>\n            <div>\n                <BtnLeft\n                    type=\"button\"\n                    onClick={() =>\n                        handleDateChange(\n                            new Date(startDate.getTime() - 24 * 60 * 60 * 1000)\n                        )\n                    }\n                >\n                    <Icon width=\"18\" height=\"18\">\n                        <use href={`${sprite}#chevron-left`} />\n                    </Icon>\n                </BtnLeft>\n                <BtnRight\n                    type=\"button\"\n                    onClick={() =>\n                        handleDateChange(\n                            new Date(startDate.getTime() + 24 * 60 * 60 * 1000)\n                        )\n                    }\n                >\n                    <Icon width=\"18\" height=\"18\">\n                        <use href={`${sprite}#chevron-right`} />\n                    </Icon>\n                </BtnRight>\n            </div>\n        </PeriodTypeSelect>\n    );\n};\nexport default TempDatePicker;\n\nconst CustomDatePicker = styled.button`\n    width: 171px;\n    display: flex;\n    padding: 8px 12px;\n    justify-content: center;\n    align-items: center;\n    border: none;\n    border-radius: 8px;\n    background: #3e85f3;\n    color: #fff;\n    text-align: center;\n    font-family: Inter;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: 18px;\n    text-transform: uppercase;\n`;\nexport const DatePickerWrapp = styled.div`\n    .react-datepicker-wrapper {\n        display: block;\n    }\n    .react-datepicker {\n        position: absolute;\n        top: 8px;\n        left: 0px;\n        width: 235px;\n        height: 280px;\n        background-color: #3e85f3;\n        border-radius: 8px;\n        color: #fff;\n        overflow: hidden;\n        border: none;\n        display: flex;\n        justify-content: center;\n        font-size: 18px;\n        line-height: 1.3;\n\n        &__header {\n            background-color: #3e85f3;\n            color: #fff;\n            border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n        }\n        &__month-container {\n            background-color: #3e85f3;\n            width: 235px;\n            height: 280px;\n\n            /* padding: 0 15px 18px 15px ; */\n        }\n\n        &__current-month {\n            font-size: 24px;\n            text-align: center;\n            font-family: Inter;\n            font-weight: 600;\n            line-height: 1.666;\n        }\n        &__day {\n            color: #fff;\n            width: 26px;\n            height: 29px;\n            font-size: 14px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-family: Inter;\n            font-style: normal;\n            font-weight: 400;\n            line-height: 18px;\n            letter-spacing: -0.28px;\n            /* @media (min-width: 768px) {\n                font-size: 18px;\n            } */\n            &:hover {\n                border-radius: 50%;\n                background-color: #fff;\n                color: #3e85f3;\n                opacity: 0.7;\n            }\n            &--weekend {\n                /* opacity: 40%; */\n            }\n\n            &--selected {\n                border-radius: 50%;\n                opacity: 1;\n                outline: none;\n\n                padding: 12px 15px;\n                text-align: center;\n                background-color: white;\n                color: #3e85f3;\n            }\n            &--keyboard-selected {\n                border-radius: 50%;\n                opacity: 1;\n                outline: none;\n            }\n        }\n\n        &__navigation {\n            margin-top: 12px;\n        }\n        &__day-name {\n            color: rgba(255, 255, 255, 0.5);\n            font-family: Inter;\n            font-size: 14px;\n            font-style: normal;\n            font-weight: 500;\n            line-height: normal;\n            letter-spacing: -0.28px;\n            width: 26px;\n        }\n\n        &__day--outside-month {\n            color: rgba(255, 255, 255, 0.2);\n        }\n\n        &__current-month {\n            color: #fff;\n            font-family: Inter;\n            font-size: 16px;\n            font-style: normal;\n            font-weight: 600;\n            line-height: normal;\n            letter-spacing: -0.32px;\n            margin-top: 10px;\n            margin-bottom: 18px;\n        }\n\n        &__navigation--years {\n            background-color: #fff;\n            border-radius: 50%;\n            width: 15px;\n            height: 15px;\n            margin: 5px auto;\n            &:hover {\n                background-color: #3e85f3;\n                border: 1px solid #fff;\n            }\n        }\n        &__year-option {\n            background-color: #3e85f3;\n            color: #fff;\n            &:hover {\n                background-color: #3e85f3;\n                font-size: 14px;\n                font-weight: 700;\n            }\n        }\n        &__year-dropdown {\n            &::-webkit-scrollbar {\n                width: 15px;\n                height: 20px;\n                background: #3e85f3;\n                border-radius: 8px;\n            }\n            &::-webkit-scrollbar-thumb {\n                background: #fff;\n                border-radius: 8px;\n            }\n        }\n        &__week {\n            display: flex;\n        }\n        &__month {\n            padding-left: 7px;\n            padding-top: 11px;\n            /* width: 197px;\n        height: 197px; */\n        }\n    }\n`;\n","import StatisticsChart from 'components/StatisticsChart/StatisticsChart';\nimport styled from '@emotion/styled';\n\nimport { useThemeContext } from 'hooks/ThemeContext';\nimport { createGlobalStyle } from 'styled-components';\nimport TempDatePicker from 'components/StatisticsChart/TempDatePicker';\nimport { useState } from 'react';\n\nconst GlobalStyles = createGlobalStyle`\n\n    body {\n        background-color: ${({ theme }) => theme.colors.backgroundPrimary};\n    }\n`;\n// import DatePicker from 'components/StatisticsChart/DatePiker';\n// import { useState } from 'react';\n\nconst StatisticsPage = () => {\n    const [startDate, setStartDate] = useState(new Date());\n    const { theme } = useThemeContext();\n\n    return (\n        <>\n            <GlobalStyles theme={theme} />\n            <SectionStyled>\n                <LegendBlock>\n                    <CalendarBlock>\n                        <TempDatePicker\n                            startDate={startDate}\n                            setStartDate={setStartDate}\n                        />\n                        {/* <DatePicker /> */}\n                    </CalendarBlock>\n                    <Legend>\n                        <li>By Day</li>\n                        <li>By Month</li>\n                    </Legend>\n                </LegendBlock>\n                <CharContainer>\n                    <StatBlock>\n                        <Yaxis>\n                            <YaxisName>Tasks</YaxisName>\n                            <Yticks>\n                                <li>100</li>\n                                <li>80</li>\n                                <li>60</li>\n                                <li>40</li>\n                                <li>20</li>\n                                <li>0</li>\n                            </Yticks>\n                        </Yaxis>\n                        <StatisticsChart\n                            startDate={startDate}\n                            setStartDate={setStartDate}\n                        />\n                    </StatBlock>\n                    <Xaxis>\n                        <Xticks>\n                            <li>To Do</li>\n                            <li>In Progress</li>\n                            <li>Done</li>\n                        </Xticks>\n                    </Xaxis>\n                </CharContainer>\n            </SectionStyled>\n        </>\n    );\n};\n\nexport default StatisticsPage;\n\nconst SectionStyled = styled.section`\n    display: flex;\n    flex-direction: column;\n    background-color: ${({ theme }) => theme.colors.backgroundSecondary};\n    border-radius: 16px;\n\n    padding: 28px 14px 135px 14px;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n        padding: 132px 32px 224px 32px;\n    }\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.l}) {\n        padding: 134px 114px 104px 113px;\n    }\n`;\nconst LegendBlock = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    padding-left: 0px;\n    margin: 0px 0px 40px 0px;\n    width: 307px;\n\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: center;\n        padding-left: 32px;\n        padding-right: 32px;\n        margin-bottom: 40px;\n        width: 640px;\n    }\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.l}) {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: center;\n        padding-left: 40px;\n        padding-right: 40px;\n        margin-bottom: 40px;\n\n        width: 860px;\n    }\n`;\n\nconst Legend = styled.ul`\n    display: flex;\n    flex-direction: row;\n    color: ${({ theme }) => theme.colors.textPrimary};\n    font-family: Inter;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 18px;\n    gap: 20px;\n    font-size: 14px;\n    li:first-of-type::before {\n        content: '';\n        display: inline-block;\n        width: 8px;\n        height: 8px;\n        background-color: #ffd2dd;\n        border-radius: 50%;\n        margin-right: 8px;\n    }\n    li:last-of-type::before {\n        content: '';\n        display: inline-block;\n        width: 8px;\n        height: 8px;\n        background-color: #3e85f3;\n        border-radius: 50%;\n        margin-right: 8px;\n    }\n    @media screen and (min-width: 768px) {\n        font-size: 16px;\n    }\n    @media screen and (min-width: 1440px) {\n        font-size: 16px;\n    }\n`;\n\nconst CalendarBlock = styled.div`\n    /* display: flex; */\n    /* gap: 50px; */\n`;\n\nconst CharContainer = styled.div`\n    border: 0.8px solid;\n    border-color: ${({ theme }) => theme.colors.statisticsLine};\n    width: 307px;\n    height: 413px;\n    border-radius: 29px;\n    padding: 73px 14px 66px 14px;\n    color: #343434;\n    font-family: Inter;\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 150%;\n    transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n        width: 640px;\n        height: 424px;\n        border-radius: 16px;\n        padding: 61px 32px 32px 32px;\n        color: #343434;\n        font-family: Inter;\n        font-size: 14px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: 150%;\n    }\n    @media screen and (min-width: ${({ theme }) => theme.breakpoints.l}) {\n        width: 860px;\n        height: 440px;\n        border-radius: 29px;\n        padding: 85px 40px 70px 40px;\n        color: #343434;\n        font-family: Inter;\n        font-size: 14px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: 150%;\n    }\n`;\nconst StatBlock = styled.section`\n    display: flex;\n    margin-bottom: 10px;\n    @media screen and (min-width: 768px) {\n        margin-bottom: 8px;\n    }\n    @media screen and (min-width: 1440px) {\n        margin-bottom: 8px;\n    }\n`;\nconst Yaxis = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-top: -37px;\n    margin-right: 0px;\n    padding-left: 0px;\n    font-weight: 600;\n    @media screen and (min-width: 768px) {\n        margin-top: -41px;\n        margin-right: 17px;\n    }\n    @media screen and (min-width: 1440px) {\n        margin-right: 46px;\n        margin-top: -40px;\n    }\n`;\nconst YaxisName = styled.p`\n    margin-bottom: 20px;\n    color: ${({ theme }) => theme.colors.textPrimary};\n    @media screen and (min-width: 768px) {\n        margin-bottom: 24px;\n    }\n    @media screen and (min-width: 1440px) {\n        margin-bottom: 24px;\n    }\n`;\nconst Yticks = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 29px;\n    font-weight: 400;\n    color: ${({ theme }) => theme.colors.textPrimary};\n    @media screen and (min-width: 768px) {\n        gap: 33px;\n    }\n    @media screen and (min-width: 1440px) {\n        gap: 33px;\n    }\n`;\nconst Xaxis = styled.div``;\n\nconst Xticks = styled.ul`\n    display: flex;\n    gap: 34px;\n    color: ${({ theme }) => theme.colors.textPrimary};\n    margin-left: 62px;\n    margin-bottom: -33px;\n    font-size: 12px;\n    @media screen and (min-width: 768px) {\n        display: flex;\n        gap: 120px;\n        margin-left: 122px;\n        margin-bottom: -33px;\n        font-size: 14px;\n    }\n    @media screen and (min-width: 1440px) {\n        display: flex;\n        gap: 176px;\n        margin-left: 180px;\n        margin-bottom: -33px;\n        font-size: 14px;\n    }\n`;\n","export const selectTasks = state => state.calendar.tasks;\n\nexport const selectError = state => state.calendar.error;\n\nexport const selectIsLoading = state => state.calendar.isLoading;\n\nexport const selectUserTask = state => state.calendar.userTask;\n"],"names":["formatPercent","value","formattedValue","toFixed","isNaN","concat","_ref","startDate","_useState","setStartDate","useState","window","innerWidth","_useState2","_slicedToArray","windowWidth","setWindowWidth","_calculateParams","width","barGap","chartWidth","chartHeight","marginRight","barSize","fontSize","calculateParams","isLightTheme","useThemeContext","theme","LIGHT","currentDate","moment","format","console","log","dispatch","useDispatch","tasks","useSelector","selectTasks","useEffect","fetchTasks","handleResize","newWidth","addEventListener","removeEventListener","fill","gridStroke","_getStatisticsCalcula","parts","split","currentMonth","parseInt","currentDay","tasksForDay","filter","task","taskDate","Date","date","taskDay","getDate","taskMonth","getMonth","tasksForMonth","todoByDay","category","length","inprogressByDay","doneByDay","todoByMonth","inprogressByMonth","doneByMonth","totalTasksForDay","totalTasksForMonth","formattedData","name","getStatisticsCalculation","_jsxs","BarChart","height","data","margin","top","right","left","bottom","barRadius","children","_jsx","CartesianGrid","horizontal","vertical","stroke","id","x1","y1","x2","y2","stopColor","offset","stopOpacity","strokeDasharray","XAxis","dataKey","hide","YAxis","ticks","Bar","radius","LabelList","position","formatter","PeriodTypeSelect","styled","_templateObject","_taggedTemplateLiteral","breakpoints","m","_templateObject2","Icon","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_ref2","colors","nameDay","BtnLeft","_templateObject8","_ref3","backgroundSecondary","_ref4","BtnRight","_templateObject9","_ref5","_ref6","textPrimary","_templateObject10","_templateObject11","_templateObject12","_templateObject13","NavLink","_templateObject14","ExampleCustomInput","forwardRef","ref","onClick","CustomDatePicker","className","handleDateChange","DatePickerWrapp","ReactDatePicker","selected","onChange","customInput","dateFormat","type","getTime","href","sprite","GlobalStyles","createGlobalStyle","backgroundPrimary","_Fragment","SectionStyled","LegendBlock","CalendarBlock","TempDatePicker","Legend","CharContainer","StatBlock","Yaxis","YaxisName","Yticks","StatisticsChart","Xaxis","Xticks","l","_ref7","_ref8","statisticsLine","_ref9","_ref10","_ref11","_ref12","_ref13","state","calendar"],"sourceRoot":""}